# -*- coding: utf-8 -*-

'''
Created on 1 Nov 2016

@author: jskyun
'''

import sys
import time
import codecs
import urllib
import urllib2
import random
import json
from lxml import html

sido_list = {      # 테스트용 시도 목록
    '대전': '042'
}

sido_list2 = {
    '서울': '02',
    '광주': '062',
    '대구': '053',
    '대전': '042',
    '부산': '051',
    '울산': '052',
    '인천': '032',
    '경기': '031',
    '강원': '033',
    '경남': '055',
    '경북': '054',
    '전남': '061',
    '전북': '063',
    '충남': '041',
    '충북': '043',
    '제주': '064',
    '세종': '044'
}

code_list = {'ctl05', 'ctl06', 'ctl08', 'ctl10', 'ctl12', 'ctl14', 'ctl16'}
#code_list = {'ctl05'}

def main():

    reload(sys)
    sys.setdefaultencoding('utf-8')

    outfile = codecs.open('folder_utf8.txt', 'w', 'utf-8')
    outfile.write("##NAME|SUBNAME|TELNUM|NEWADDR|FEAT|OT@@폴더\n")

    for code in sorted(code_list):
        storeList = getStores(code)
        if storeList == None: break;

        for store in storeList:
            outfile.write(u'폴더|')
            outfile.write(u'%s|' % store['subname'])
            outfile.write(u'%s|' % store['pn'])
            outfile.write(u'%s|' % store['newaddr'])
            outfile.write(u'%s|' % store['feat'])
            outfile.write(u'%s\n' % store['ot'])

        time.sleep(random.uniform(0.3, 0.9))

    outfile.close()


def getStores(code):
    # 'http://www.folderstyle.com/About/Store_Info.aspx'
    url = 'http://www.folderstyle.com'
    api = '/About/Store_Info.aspx'
    data = {}
    #params = urllib.urlencode(data)
    #print(params)
    #params = 'ctl00%24ScriptManager1=ctl00%24ContentPlaceHolder1%24uptStore%7Cctl00%24ContentPlaceHolder1%24GDPager%24ctl16&hdnSelectedMonthMaster=&ctl00%24ContentPlaceHolder1%24txtSearchString=&ctl00%24ContentPlaceHolder1%24selArea=&ctl00%24ContentPlaceHolder1%24selType=&__EVENTTARGET=ctl00%24ContentPlaceHolder1%24GDPager%24ctl16&__EVENTARGUMENT='
    params = 'ctl00%24ScriptManager1=ctl00%24ContentPlaceHolder1%24uptStore%7Cctl00%24ContentPlaceHolder1%24GDPager%24ctl05&hdnSelectedMonthMaster=&ctl00%24ContentPlaceHolder1%24txtSearchString=&ctl00%24ContentPlaceHolder1%24selArea=&ctl00%24ContentPlaceHolder1%24selType=&__EVENTTARGET=ctl00%24ContentPlaceHolder1%24GDPager%24ctl05&__EVENTARGUMENT=&__VIEWSTATE=%2FwEPDwUJNTU2MjQ1NDgwD2QWAmYPZBYCAgMPZBYEAgMPZBYKAgIPFgIeC18hSXRlbUNvdW50AgMWBmYPZBYEZg8VAgQxMDAxAGQCAQ8WAh8AAgcWDmYPZBYEZg8VAwQgZDAxBDExMDYJ7Jq064%2BZ7ZmUZAIBDxYCHwACBRYKZg9kFgJmDxUCBDExNDkM7LqU67KE7Iqk7ZmUZAIBD2QWAmYPFQIEMTE0NgzsiqTri4jsu6TspohkAgIPZBYCZg8VAgQxMTQ3CeyKrOumveyYqGQCAw9kFgJmDxUCBDExNDgG7KGw6rGwZAIED2QWAmYPFQIEMTE0NQnrn7Dri53tmZRkAgEPZBYEZg8VAwAEMTEwNQbsg4zrk6RkAgEPFgIfAAIEFghmD2QWAmYPFQIEMTI5OBDsiqTtj6zsuKAg7IOM65OkZAIBD2QWAmYPFQIEMTE0MBDsiqTtirjrnqkg7IOM65OkZAICD2QWAmYPFQIEMTE0MQzsiqzrnbzsnbTrk5xkAgMPZBYCZg8VAgQxMjEzEOyasOu4kC%2FslYTsv6DslYRkAgIPZBYEZg8VAwAEMTEwNAbrtoDsuKBkAgEPFgIfAAIBFgJmD2QWAmYPFQIEMTIxNQzsm4ztgazrtoDsuKBkAgMPZBYEZg8VAwAEMTEwMgbqtazrkZBkAgEPFgIfAAIEFghmD2QWAmYPFQIEMTIyMQzsmKXsiqTtj6zrk5xkAgEPZBYCZg8VAgQxMTI5BuuhnO2NvGQCAg9kFgJmDxUCBDEyMjIG642U67mEZAIDD2QWAmYPFQIEMTIyNQztj6zsiqTtirjrp6hkAgQPZBYEZg8VAwAEMTEwMQbqsIDrsKlkAgEPFgIfAAIIFhBmD2QWAmYPFQIEMTEyNAnsl5DsvZTrsLFkAgEPZBYCZg8VAgQxMTI3Ce2GoO2KuOuwsWQCAg9kFgJmDxUCBDExMjMG67Cx7YypZAIDD2QWAmYPFQIEMTEyMhPrqZTsi6DsoIAv7Iqs66eB67CxZAIED2QWAmYPFQIEMTEyOAbtnpnsg4lkAgUPZBYCZg8VAgQxMTI1EOyngOqwkS%2FtjIzsmrDsuZhkAgYPZBYCZg8VAgQxMTI2E%2B2BrOuhnOyKpC%2FsiITrjZTrsLFkAgcPZBYCZg8VAgQxMTIxCeuNlO2UjOuwsWQCBQ9kFgRmDxUDAAQxMTAzEeuqqOyekCDrsI8g7Jqp7ZKIZAIBDxYCHwACCBYQZg9kFgJmDxUCBDExMzMG67O87LqhZAIBD2QWAmYPFQIEMTEzNQnsiqTrg4XrsLFkAgIPZBYCZg8VAgQxMTMyCeuyhO2Ct%2B2Wh2QCAw9kFgJmDxUCBDExMzQG67mE64uIZAIED2QWAmYPFQIEMTEzNxbtjpjrj4Trnbwv7YyM64KY66eI7ZaHZAIFD2QWAmYPFQIEMTIyNgzshKDquIDrnbzsiqRkAgYPZBYCZg8VAgQxMTM2BuyWkeunkGQCBw9kFgJmDxUCBDExMzEG6riw7YOAZAIGD2QWBGYPFQMABDExMDcG7J2Y66WYZAIBDxYCHwACBhYMZg9kFgJmDxUCBDExNTIG67CY7YyUZAIBD2QWAmYPFQIEMTE1MAbquLTtjJRkAgIPZBYCZg8VAgQxMTUxCeunqO2IrOunqGQCAw9kFgJmDxUCBDExNTUG7ZuE65OcZAIED2QWAmYPFQIEMTE1MwnslYTsmrDthLBkAgUPZBYCZg8VAgQxMTU0Bu2VmOydmGQCAQ9kFgRmDxUCBDEwMDIMZGlzcGxheTpub25lZAIBDxYCHwACBxYOZg9kFgRmDxUDBCBkMDEEMTExMwnsmrTrj5ntmZRkAgEPFgIfAAIFFgpmD2QWAmYPFQIEMTE5MAzsupTrsoTsiqTtmZRkAgEPZBYCZg8VAgQxMTg2DOyKpOuLiOy7pOymiGQCAg9kFgJmDxUCBDExODgJ7Iqs66a97JioZAIDD2QWAmYPFQIEMTE4OQbsobDqsbBkAgQPZBYCZg8VAgQxMTg1CeufsOuLne2ZlGQCAQ9kFgRmDxUDAAQxMTEyBuyDjOuTpGQCAQ8WAh8AAgQWCGYPZBYCZg8VAgQxMjk5EOyKpO2PrOy4oCDsg4zrk6RkAgEPZBYCZg8VAgQxMTgwEOyKpO2KuOueqSDsg4zrk6RkAgIPZBYCZg8VAgQxMTgxDOyKrOudvOydtOuTnGQCAw9kFgJmDxUCBDEyMjkQ7Jqw67iQL%2ByVhOy%2FoOyVhGQCAg9kFgRmDxUDAAQxMTExBuu2gOy4oGQCAQ8WAh8AAgMWBmYPZBYCZg8VAgQxMTc3DOybjO2BrOu2gOy4oGQCAQ9kFgJmDxUCBDExNzYO7JW17YG0LCDrtoDti7BkAgIPZBYCZg8VAgQxMTc4DO2MqOuUqeu2gOy4oGQCAw9kFgRmDxUDAAQxMTA5Buq1rOuRkGQCAQ8WAh8AAgUWCmYPZBYCZg8VAgQxMjkxDuyVte2BtCwg67aA7YuwZAIBD2QWAmYPFQIEMTIzOQzsmKXsiqTtj6zrk5xkAgIPZBYCZg8VAgQxMTY1BuuhnO2NvGQCAw9kFgJmDxUCBDExNjcG7ZSM656rZAIED2QWAmYPFQIEMTE2OAPtnpBkAgQPZBYEZg8VAwAEMTEwOAbqsIDrsKlkAgEPFgIfAAIIFhBmD2QWAmYPFQIEMTE2MAnsl5DsvZTrsLFkAgEPZBYCZg8VAgQxMTYzCe2GoO2KuOuwsWQCAg9kFgJmDxUCBDExNTkG67Cx7YypZAIDD2QWAmYPFQIEMTE1OBPrqZTsi6DsoIAv7Iqs66eB67CxZAIED2QWAmYPFQIEMTE2NAbtnpnsg4lkAgUPZBYCZg8VAgQxMTYxEOyngOqwkS%2FtjIzsmrDsuZhkAgYPZBYCZg8VAgQxMTYyE%2B2BrOuhnOyKpC%2FsiITrjZTrsLFkAgcPZBYCZg8VAgQxMTU3CeuNlO2UjOuwsWQCBQ9kFgRmDxUDAAQxMTEwEeuqqOyekCDrsI8g7Jqp7ZKIZAIBDxYCHwACCBYQZg9kFgJmDxUCBDExNzEG67O87LqhZAIBD2QWAmYPFQIEMTE3MwnsiqTrg4XrsLFkAgIPZBYCZg8VAgQxMTcwCeuyhO2Ct%2B2Wh2QCAw9kFgJmDxUCBDExNzIG67mE64uIZAIED2QWAmYPFQIEMTE3NRbtjpjrj4Trnbwv7YyM64KY66eI7ZaHZAIFD2QWAmYPFQIEMTI0MgzshKDquIDrnbzsiqRkAgYPZBYCZg8VAgQxMTc0BuyWkeunkGQCBw9kFgJmDxUCBDExNjkG6riw7YOAZAIGD2QWBGYPFQMABDExMTQG7J2Y66WYZAIBDxYCHwACBhYMZg9kFgJmDxUCBDExOTMG67CY7YyUZAIBD2QWAmYPFQIEMTE5MQbquLTtjJRkAgIPZBYCZg8VAgQxMTkyCeunqO2IrOunqGQCAw9kFgJmDxUCBDExOTYG7ZuE65OcZAIED2QWAmYPFQIEMTE5NAnslYTsmrDthLBkAgUPZBYCZg8VAgQxMTk1Bu2VmOydmGQCAg9kFgRmDxUCBDEwMDMMZGlzcGxheTpub25lZAIBDxYCHwACBRYKZg9kFgRmDxUDBCBkMDEEMTExOAnsmrTrj5ntmZRkAgEPFgIfAAIFFgpmD2QWAmYPFQIEMTIwOAzsupTrsoTsiqTtmZRkAgEPZBYCZg8VAgQxMjA1DOyKpOuLiOy7pOymiGQCAg9kFgJmDxUCBDEyMDYJ7Iqs66a97JioZAIDD2QWAmYPFQIEMTIwNwbsobDqsbBkAgQPZBYCZg8VAgQxMjA0Buq4sO2DgGQCAQ9kFgRmDxUDAAQxMTE3BuyDjOuTpGQCAQ8WAh8AAgIWBGYPZBYCZg8VAgQxMjAxEOyKpO2KuOueqSDsg4zrk6RkAgEPZBYCZg8VAgQxMjAyEOyasOu4kC%2FslYTsv6DslYRkAgIPZBYEZg8VAwAEMTExNgbrtoDsuKBkAgEPFgIfAAIDFgZmD2QWAmYPFQIEMTI3NAzsm4ztgazrtoDsuKBkAgEPZBYCZg8VAgQxMjAwDO2MqOuUqeu2gOy4oGQCAg9kFgJmDxUCBDEyNzYM66CI7J2467aA7LigZAIDD2QWBGYPFQMABDEyMzIG6rWs65GQZAIBDxYCHwACARYCZg9kFgJmDxUCBDEyNTMG66Gc7Y28ZAIED2QWBGYPFQMABDExMTUR66qo7J6QIOuwjyDsmqntkohkAgEPFgIfAAIBFgJmD2QWAmYPFQIEMTE5NwbslpHrp5BkAgMPFgIfAAIfFj5mD2QWAmYPFQQAAlZOEGNhdGVfbG9nb192bi5wbmcEVkFOU2QCAQ9kFgJmDxUEAAJGTBBjYXRlX2xvZ29fZmwucG5nBEZJTEFkAgIPZBYCZg8VBAACTkIQY2F0ZV9sb2dvX25iLnBuZwtORVcgQkFMQU5DRWQCAw9kFgJmDxUEAAJBQxBjYXRlX2xvZ29fYWMucG5nCkFTSUNTVElHRVJkAgQPZBYCZg8VBAACQ0MQY2F0ZV9sb2dvX2NjLnBuZwhDTEFTU0lDT2QCBQ9kFgJmDxUEAAJQUhBjYXRlX2xvZ29fcHIucG5nBVBJRVI0ZAIGD2QWAmYPFQQAAkZEEGNhdGVfbG9nb19mZC5wbmcMRk9MREVSIExBQkVMZAIHD2QWAmYPFQQAAkNXEGNhdGVfbG9nb19jdy5wbmcIQ0hJU1dJQ0tkAggPZBYCZg8VBAACRlkQY2F0ZV9sb2dvX2Z5LnBuZwZGRUlZVUVkAgkPZBYCZg8VBAACR0QQY2F0ZV9sb2dvX2dkLnBuZxBIQVZFIEEgR09PRCBUSU1FZAIKD2QWAmYPFQQAAkhUEGNhdGVfbG9nb19odC5wbmcGSEFSVVRBZAILD2QWAmYPFQQAAktDEGNhdGVfbG9nb19rYy5wbmcFS09MQ0FkAgwPZBYCZg8VBAACS0wQY2F0ZV9sb2dvX2tsLnBuZwZLTEVNQU5kAg0PZBYCZg8VBAACS08QY2F0ZV9sb2dvX2tvLnBuZwdLT01SQURTZAIOD2QWAmYPFQQAAk1QE2NhdGVfbG9nb19tcCgxKS5wbmcJTUFOSVBFTExPZAIPD2QWAmYPFQQAAk9UEGNhdGVfbG9nb19vdC5wbmcDT1RaZAIQD2QWAmYPFQQAAlBGEGNhdGVfbG9nb19wZi5wbmcJUEYtRkxZRVJTZAIRD2QWAmYPFQQAAlJBEGNhdGVfbG9nb19yYS5wbmcGUkFXUk9XZAISD2QWAmYPFQQAAlBME2NhdGVfbG9nb19wbCgyKS5qcGcJUEFMTEFESVVNZAITD2QWAmYPFQQAAlNVEGNhdGVfbG9nb19zdS5wbmcHU1VQRVJHQWQCFA9kFgJmDxUEAAJTVhBjYXRlX2xvZ29fc3YucG5nCDQ3IEJSQU5EZAIVD2QWAmYPFQQAAlROEGNhdGVfbG9nb190bi5wbmcHVFJFVE9STmQCFg9kFgJmDxUEAAJVQxBjYXRlX2xvZ29fdWMucG5nDFVOREVSQ09OVFJPTGQCFw9kFgJmDxUEAAJWQxBjYXRlX2xvZ29fdmMucG5nD1ZpbmNlbnQtUHJhZGllcmQCGA9kFgJmDxUEAAJWUxBjYXRlX2xvZ29fdnMucG5nB1ZBTkFESVNkAhkPZBYCZg8VBAACRUEQY2F0ZV9sb2dvX2VhLnBuZwhFQVNUTEFORGQCGg9kFgJmDxUEAAJQVRBjYXRlX2xvZ29fcHUucG5nBFBVTUFkAhsPZBYCZg8VBAACRkETY2F0ZV9sb2dvX2ZhKDEpLnBuZxdGT1JERVJMQUJFTCBBQ0NFU1NPUklFU2QCHA9kFgJmDxUEAAJTTxNjYXRlX2xvZ29fc28oMSkucG5nDVNURVJFTyBWSU5ZTFNkAh0PZBYCZg8VBAACQVkQY2F0ZV9sb2dvX2F5LnBuZwlVTkFMTE9ZRURkAh4PZBYCZg8VBAACR0UQY2F0ZV9sb2dvX2dlLnBuZwNBR0VkAgQPFgIfAAIGFgxmD2QWAmYPFQQAHi9TaG9wL1ByX1NhbGUuYXNweD9TYWxlSWR4PTM4NGg8aW1nIHNyYz0iaHR0cDovL2ltYWdlLmZvbGRlcnN0eWxlLmNvbS9QbGFuLzIwMTkwMy%2FsiqzrnbzsnbTrk5zsjbjrhKxfcC5qcGciIHdpZHRoPSczNjAnIGhlaWdodD0nMjQyJyAvPgVTTElERWQCAQ9kFgJmDxUEAB4vU2hvcC9Qcl9TYWxlLmFzcHg%2FU2FsZUlkeD0zODJlPGltZyBzcmM9Imh0dHA6Ly9pbWFnZS5mb2xkZXJzdHlsZS5jb20vUGxhbi8yMDE5MDMv7Iqk7ZSE66eB7I2464SsX3AuanBnIiB3aWR0aD0nMzYwJyBoZWlnaHQ9JzI0MicgLz4TU1BSSU5HIEZBU0hJT04gV0VFS2QCAg9kFgJmDxUEIDwvbGk%2BPGxpIHN0eWxlPSJkaXNwbGF5OiBub25lOyI%2BHi9TaG9wL1ByX1NhbGUuYXNweD9TYWxlSWR4PTM3Nmg8aW1nIHNyYz0iaHR0cDovL2ltYWdlLmZvbGRlcnN0eWxlLmNvbS9QbGFuLzIwMTkwMi%2Fsu6zrn6ztg5zqt7jsjbjrhKxfcC5qcGciIHdpZHRoPSczNjAnIGhlaWdodD0nMjQyJyAvPhrrtITrp57snbQg7Lus65%2Bs67OEIOyKiOymiGQCAw9kFgJmDxUEAB4vU2hvcC9Qcl9TYWxlLmFzcHg%2FU2FsZUlkeD0zNTdiPGltZyBzcmM9Imh0dHA6Ly9pbWFnZS5mb2xkZXJzdHlsZS5jb20vUGxhbi8yMDE4MTIv7IaU66Gc7I2464SsX3AuanBnIiB3aWR0aD0nMzYwJyBoZWlnaHQ9JzI0MicgLz4d7Zi87J6Q6rCAIO2OuO2VnCDri7nsi6Dsl5DqsoxkAgQPZBYCZg8VBCA8L2xpPjxsaSBzdHlsZT0iZGlzcGxheTogbm9uZTsiPh4vU2hvcC9Qcl9TYWxlLmFzcHg%2FU2FsZUlkeD0zNTVuPGltZyBzcmM9Imh0dHA6Ly9pbWFnZS5mb2xkZXJzdHlsZS5jb20vUGxhbi8yMDE4MTIv67Kg7Iqk7Yq47Ja07JuM65Oc7I2464SsX20uanBnIiB3aWR0aD0nMzYwJyBoZWlnaHQ9JzI0MicgLz4KQkVTVCBBV0FSRGQCBQ9kFgJmDxUEAB4vU2hvcC9Qcl9TYWxlLmFzcHg%2FU2FsZUlkeD0yNzZoPGltZyBzcmM9Imh0dHA6Ly9pbWFnZS5mb2xkZXJzdHlsZS5jb20vUGxhbi8yMDE4MDcvMjAxOTAxMjRfbGFzdHNhbGUoMikuanBnIiB3aWR0aD0nMzYwJyBoZWlnaHQ9JzI0MicgLz4JTEFTVCBTSVpFZAIFDxYCHgRUZXh0BYMCPGRpdiBjbGFzcz0iYngtcGFnZXItaXRlbSI%2BPGEgY2xhc3M9ImJ4LXBhZ2VyLWxpbmsgYWN0aXZlIiBkYXRhLXNsaWRlLWluZGV4PSIwIj4wPC9hPjwvZGl2PjxkaXYgY2xhc3M9ImJ4LXBhZ2VyLWl0ZW0iPjxhIGNsYXNzPSJieC1wYWdlci1saW5rIiBkYXRhLXNsaWRlLWluZGV4PSIxIj4xPC9hPjwvZGl2PjxkaXYgY2xhc3M9ImJ4LXBhZ2VyLWl0ZW0iPjxhIGNsYXNzPSJieC1wYWdlci1saW5rIiBkYXRhLXNsaWRlLWluZGV4PSIyIj4yPC9hPjwvZGl2PmQCBg8WAh8AAkQWiAECAQ9kFgJmDxUDAk5LE2NhdGVfbG9nb19uaygxKS5wbmcETklLRWQCAg9kFgJmDxUDAlNWEGNhdGVfbG9nb19zdi5wbmcINDcgQlJBTkRkAgMPZBYCZg8VAwJBRBBjYXRlX2xvZ29fYWQucG5nBkFESURBU2QCBA9kFgJmDxUDAkdFEGNhdGVfbG9nb19nZS5wbmcDQUdFZAIFD2QWAmYPFQMCQVAQY2F0ZV9sb2dvX2FwLnBuZxBBTFBIQSBJTkRVU1RSSUVTZAIGD2QWAmYPFQMCQUcQY2F0ZV9sb2dvX2FnLnBuZwtBTkdFTCBTT0NLU2QCBw9kFgJmDxUDAkFDEGNhdGVfbG9nb19hYy5wbmcKQVNJQ1NUSUdFUmQCCA9kFgJmDxUDAkNXEGNhdGVfbG9nb19jdy5wbmcIQ0hJU1dJQ0tkAgkPZBYCZg8VAwJDUxBjYXRlX2xvZ29fY3MucG5nBUNIVU1TZAIKD2QWAmYPFQMCQ0wQY2F0ZV9sb2dvX2NsLnBuZwZDTEFSS1NkAgsPZBYCZg8VAwJDQxBjYXRlX2xvZ29fY2MucG5nCENMQVNTSUNPZAIMD2QWAmYPFQMCT1MQY2F0ZV9sb2dvX29zLnBuZwVDUk9DU2QCDQ9kFgJmDxUDAkRSEGNhdGVfbG9nb19kci5wbmcLRFIuIE1BUlRFTlNkAg4PZBYCZg8VAwJFQRBjYXRlX2xvZ29fZWEucG5nCEVBU1RMQU5EZAIPD2QWAmYPFQMCRVAQY2F0ZV9sb2dvX2VwLnBuZwdFQVNUUEFLZAIQD2QWAmYPFQMCRUIQY2F0ZV9sb2dvX2ViLnBuZw1FQkJFVFMgRklFTEQgZAIRD2QWAmYPFQMCRlkQY2F0ZV9sb2dvX2Z5LnBuZwZGRUlZVUVkAhIPZBYCZg8VAwJGTBBjYXRlX2xvZ29fZmwucG5nBEZJTEFkAhMPZBYCZg8VAwJGRBBjYXRlX2xvZ29fZmQucG5nDEZPTERFUiBMQUJFTGQCFA9kFgJmDxUDAkZBE2NhdGVfbG9nb19mYSgxKS5wbmcXRk9SREVSTEFCRUwgQUNDRVNTT1JJRVNkAhUPZBYCZg8VAwJGRhNjYXRlX2xvZ29fZmYoMSkucG5nCkZSRUQgUEVSUllkAhYPZBYCZg8VAwJGVRBjYXRlX2xvZ29fZnUucG5nBEZSU1RkAhcPZBYCZg8VAwJTRBNjYXRlX2xvZ29fc2QoMikucG5nEUZSVUlUIE9GIFRIRSBMT09NZAIYD2QWAmYPFQMCR1cTY2F0ZV9sb2dvX2d3KDEpLnBuZwlHT09EV09SVEhkAhkPZBYCZg8VAwJHTRNjYXRlX2xvZ29fZ20oMSkucG5nCEdSQU1JQ0NJZAIaD2QWAmYPFQMCR1kQY2F0ZV9sb2dvX2d5LnBuZwdHUkVHT1JZZAIbD2QWAmYPFQMCSFQQY2F0ZV9sb2dvX2h0LnBuZwZIQVJVVEFkAhwPZBYCZg8VAwJHRBBjYXRlX2xvZ29fZ2QucG5nEEhBVkUgQSBHT09EIFRJTUVkAh0PZBYCZg8VAwJIRRBjYXRlX2xvZ29faGUucG5nBkhFRUxZU2QCHg9kFgJmDxUDAkhTEGNhdGVfbG9nb19ocy5wbmcISEVSU0NIRUxkAh8PZBYCZg8VAwJVRhBjYXRlX2xvZ29fdWYucG5nA0hVRmQCIA9kFgJmDxUDAklCE2NhdGVfbG9nb19pYigxKS5wbmcWSSBBTSBOT1QgQSBIVU1BTiBCRUlOR2QCIQ9kFgJmDxUDAklOE2NhdGVfbG9nb19pbigxKS5wbmcGSU5DQVNFZAIiD2QWAmYPFQMCSk4QY2F0ZV9sb2dvX2puLnBuZwhKQU5TUE9SVGQCIw9kFgJmDxUDAktWEGNhdGVfbG9nb19rdi5wbmcES0FWVWQCJA9kFgJmDxUDAktMEGNhdGVfbG9nb19rbC5wbmcGS0xFTUFOZAIlD2QWAmYPFQMCS0MQY2F0ZV9sb2dvX2tjLnBuZwVLT0xDQWQCJg9kFgJmDxUDAkxBEGNhdGVfbG9nb19sYS5wbmcHTEFDT1NURWQCJw9kFgJmDxUDAk1DE2NhdGVfbG9nb19tYygxKS5wbmcDTE1DZAIoD2QWAmYPFQMCTVATY2F0ZV9sb2dvX21wKDEpLnBuZwlNQU5JUEVMTE9kAikPZBYCZg8VAwJOQhBjYXRlX2xvZ29fbmIucG5nC05FVyBCQUxBTkNFZAIqD2QWAmYPFQMCT1kQY2F0ZV9sb2dvX295LnBuZwRPQkVZZAIrD2QWAmYPFQMCT1QQY2F0ZV9sb2dvX290LnBuZwNPVFpkAiwPZBYCZg8VAwJQTBNjYXRlX2xvZ29fcGwoMikuanBnCVBBTExBRElVTWQCLQ9kFgJmDxUDAlBGEGNhdGVfbG9nb19wZi5wbmcJUEYtRkxZRVJTZAIuD2QWAmYPFQMCUFIQY2F0ZV9sb2dvX3ByLnBuZwVQSUVSNGQCLw9kFgJmDxUDAlBLEGNhdGVfbG9nb19way5wbmcIUFJPLUtFRFNkAjAPZBYCZg8VAwJQVRBjYXRlX2xvZ29fcHUucG5nBFBVTUFkAjEPZBYCZg8VAwJSQRBjYXRlX2xvZ29fcmEucG5nBlJBV1JPV2QCMg9kFgJmDxUDAlJCEGNhdGVfbG9nb19yYi5wbmcGUkVFQk9LZAIzD2QWAmYPFQMCTEQQY2F0ZV9sb2dvX2xkLnBuZwdSSVBORElQZAI0D2QWAmYPFQMCU0oQY2F0ZV9sb2dvX3NqLnBuZwtTQUlOVCBKQU1FU2QCNQ9kFgJmDxUDAlNBEGNhdGVfbG9nb19zYS5wbmcMU09DS1MgQVBQRUFMZAI2D2QWAmYPFQMCR08TY2F0ZV9sb2dvX2dvKDEpLnBuZwpTT0dPTlNPR09OZAI3D2QWAmYPFQMCU08TY2F0ZV9sb2dvX3NvKDEpLnBuZw1TVEVSRU8gVklOWUxTZAI4D2QWAmYPFQMCTk8QY2F0ZV9sb2dvX25vLnBuZxFTVU5EQVkgQUZURVJOT09OU2QCOQ9kFgJmDxUDAlNVEGNhdGVfbG9nb19zdS5wbmcHU1VQRVJHQWQCOg9kFgJmDxUDAlRMEGNhdGVfbG9nb190bC5wbmcKVElNQkVSTEFORGQCOw9kFgJmDxUDAlRCEGNhdGVfbG9nb190Yi5wbmcHVElNQlVLMmQCPA9kFgJmDxUDAlROEGNhdGVfbG9nb190bi5wbmcHVFJFVE9STmQCPQ9kFgJmDxUDAlVDEGNhdGVfbG9nb191Yy5wbmcMVU5ERVJDT05UUk9MZAI%2BD2QWAmYPFQMCVU0TY2F0ZV9sb2dvX3VtKDEpLnBuZwVVTUJST2QCPw9kFgJmDxUDAlZTEGNhdGVfbG9nb192cy5wbmcHVkFOQURJU2QCQA9kFgJmDxUDAlZOEGNhdGVfbG9nb192bi5wbmcEVkFOU2QCQQ9kFgJmDxUDAlZDEGNhdGVfbG9nb192Yy5wbmcPVmluY2VudC1QcmFkaWVyZAJCD2QWAmYPFQMCV0IQY2F0ZV9sb2dvX3diLnBuZwtXSElURSBCTEFOS2QCQw9kFgJmDxUDAldHEGNhdGVfbG9nb193Zy5wbmcNV0lHR0xFIFdJR0dMRWQCRA9kFgJmDxUDAlhMEGNhdGVfbG9nb194bC5wbmcHWCBMQVJHRWQCBw9kFgQCAQ8WAh8AAhAWIGYPZBYCZg8VAgIxMwbshJzsmrhkAgEPZBYCZg8VAgIwNgbsnbjsspxkAgIPZBYCZg8VAgIwOQbqsr3quLBkAgMPZBYCZg8VAgIwNwbqsJXsm5BkAgQPZBYCZg8VAgIwNAbstqnrtoFkAgUPZBYCZg8VAgIwNQbstqnrgqhkAgYPZBYCZg8VAgIxNQbrjIDsoIRkAgcPZBYCZg8VAgIxMAbqsr3rtoFkAggPZBYCZg8VAgIxMQbqsr3rgqhkAgkPZBYCZg8VAgIxMgbrtoDsgrBkAgoPZBYCZg8VAgIxNgbsmrjsgrBkAgsPZBYCZg8VAgIxNAbrjIDqtaxkAgwPZBYCZg8VAgIwMgbsoITrtoFkAg0PZBYCZg8VAgIwMwbsoITrgqhkAg4PZBYCZg8VAgIwOAbqtJHso7xkAg8PZBYCZg8VAgIwMQbsoJzso7xkAgUPZBYCZg9kFggCAQ8PFgIfAQUCNDBkZAIHDxYCHwACBhYMZg9kFgRmDxUFBuyghOuCqBJMRiDsiqTtgJjslrTqtJHslpFW7KCE652864Ko64%2BEIOq0keyWkeyLnCDqtJHslpHsnY0g642V66GA66asIDcwOC04IExG7Iqk7YCY7Ja06rSR7JaR7KCQIDHsuLUgQuuPmSAxMDjtmLgMMDYxLTgxNS00NjUyDTExOjAwIC0gMjE6MDBkAgEPFgIeBGhyZWYFTGphdmFzY3JpcHQ6RGlzcEdvb2dsZU1hcCgnMCcsICfsoITrnbzrgqjrj4Qg6rSR7JaR7IucIOq0keyWkeydjSDrjZXroYDrpqwnKTtkAgEPZBYEZg8VBQbqsr3rtoEf7Iug7IS46rOE64%2BZ64yA6rWsX%2BuvuOuLiO2PtOuNlCXrjIDqtazqtJHsl63si5wg64%2BZ6rWsIOyLoOyynOuPmSAxNTA2DDA1My02NjEtNjU3Mw0xMDozMCB%2BIDIxOjAwZAIBDxYCHwIFR2phdmFzY3JpcHQ6RGlzcEdvb2dsZU1hcCgnMScsICfrjIDqtazqtJHsl63si5wg64%2BZ6rWsIOyLoOyynOuPmSAxNTA2Jyk7ZAICD2QWBGYPFQUG6rK967aBCeq1rOuvuOygkDPqsr3sg4HrtoHrj4Qg6rWs66%2B47IucIOybkO2PieuPmSAxMzAtMTkgMey4tSDtj7TrjZQMMDU0LTQ1MS0wMDcwDTEwOjMwIH4gMjI6MzBkAgEPFgIfAgVJamF2YXNjcmlwdDpEaXNwR29vZ2xlTWFwKCcyJywgJ%2BqyveyDgeu2geuPhCDqtazrr7jsi5wg7JuQ7Y%2BJ64%2BZIDEzMC0xOScpO2QCAw9kFgRmDxUFBuqyveq4sCDsi6DshLjqs4Qg7J2Y7KCV67aAX%2BuvuOuLiO2PtOuNlE%2Fqsr3quLDrj4Qg7J2Y7KCV67aA7IucIO2Pie2ZlOuhnCA1MjUg7Iug7IS46rOE67Cx7ZmU7KCQ7J2Y7KCV67aA7KCQIDbsuLUg7Y%2B0642UDTAzMS04MDgyLTA2ODQAZAIBDxYCHwIFRmphdmFzY3JpcHQ6RGlzcEdvb2dsZU1hcCgnMycsICfqsr3quLDrj4Qg7J2Y7KCV67aA7IucIO2Pie2ZlOuhnCA1MjUnKTtkAgQPZBYEZg8VBQbqsr3quLAm7Iug7IS46rOE67Cx7ZmU7KCQIO2VmOuCqCDsiqTtg4DtlYTrk5xI6rK96riw64%2BEIO2VmOuCqOyLnCDrr7jsgqzrjIDroZwgNzUwIOyKpO2DgO2VhOuTnCDtlZjrgqggR0wxMjXtmLgg7Y%2B0642UDTAzMS04MDcyLTgyMTMAZAIBDxYCHwIFRmphdmFzY3JpcHQ6RGlzcEdvb2dsZU1hcCgnNCcsICfqsr3quLDrj4Qg7ZWY64Ko7IucIOuvuOyCrOuMgOuhnCA3NTAnKTtkAgUPZBYEZg8VBQbqsr3quLAVQUvsiJjsm5Bf66%2B464uI7Y%2B0642UR%2Bqyveq4sOuPhCDsiJjsm5Dsi5wg7YyU64us6rWsIOuNleyYgeuMgOuhnCA5MjQgQUvtlIzrnbzsnpAmIDTsuLUg7Y%2B0642UDDAzMS0yNDAtMjE2NABkAgEPFgIfAgVMamF2YXNjcmlwdDpEaXNwR29vZ2xlTWFwKCc1JywgJ%2Bqyveq4sOuPhCDsiJjsm5Dsi5wg7YyU64us6rWsIOuNleyYgeuMgOuhnCcpO2QCCQ8WAh4HVmlzaWJsZWhkAgsPDxYKHghQYWdlU2l6ZQIGHhBjdXJyZW50UGFnZUluZGV4AgEeEFZpcnR1YWxJdGVtQ291bnQCKB4JQmxvY2tTaXplAgofA2dkZGRtmiCpV6j3O0WLIUYXk84a4%2BCfaQ%3D%3D&__EVENTVALIDATION=%2FwEWCwLyr6qNDwLct8CsBgKvsoCzDwLVuPvSAwKm9NSSAgLOquJoAoT9nZMFArrP2b0JAvChlegNAqCBk%2BYLAvf5i%2FsHhn3leS7EWivD69aY5EkxDRlc3ls%3D&__ASYNCPOST=true&'
    #params = 'ctl00%24ScriptManager1=ctl00%24ContentPlaceHolder1%24uptStore%7Cctl00%24ContentPlaceHolder1%24GDPager%24ctl05&hdnSelectedMonthMaster=&ctl00%24ContentPlaceHolder1%24txtSearchString=&ctl00%24ContentPlaceHolder1%24selArea=&ctl00%24ContentPlaceHolder1%24selType=&__EVENTTARGET=ctl00%24ContentPlaceHolder1%24GDPager%24ctl05&__EVENTARGUMENT=&__VIEWSTATE=&__EVENTVALIDATION=%2FwEWDAK5poXdCwLct8CsBgKvsoCzDwKf5r%2BoDwLwoZnoDQKm9NSSAgLOquJoAoT9nZMFArrP2b0JAvChlegNAqCBk%2BYLAvf5i%2FsHnlTaOP3pwV7eBwmEV7ONFna6uMk%3D&__ASYNCPOST=true&'
    params = params.replace('ctl05', code)
    print(code)

    hdr = {
        'Accept': '*/*',
        #'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Encoding': 'deflate, br',
        'Accept-Language': 'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7',
        'Connection': 'keep-alive',
        'Cookie': 'ACEFCID=UID-5C81378B234D4D931AABDFD2; ASP.NET_SessionId=susd33q34bgdho55llvfcjmt; top=pc; AWSELB=818599DD1C099276F016AF4A7241066BD3C0453EF739BBAE74200A407E7A25D0BADFD34E99C73EE1251609AE682C7DA3147AB82FD3ED1EFAC61072F6F6AD049EB017566038; cto_lwid=ddeaf0b0-182f-43ba-8970-583ed038e750; _ga=GA1.2.813348894.1551972235; _gid=GA1.2.1825390482.1551972235; _fbp=fb.1.1551972235515.1121922508; wcs_bt=s_3c28c511fc92:1551972235',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36',
    }

    try:
        req = urllib2.Request(url + api, params, headers=hdr)  # POST 방식일 땐 이렇게 호출해야 함!!!
        #req = urllib2.Request(url + api, params)        # header값 맞추기 어려운 경우에는, 그냥 header 정보 없이 호출할 것! (특별한 경우를 빼고는 이렇게 호출해도 됨)
        req.get_method = lambda: 'POST'
        result = urllib2.urlopen(req)
    except:
        print('Error calling the API');     return None

    code = result.getcode()
    if code != 200:
        print('HTTP request error (status %d)' % code);     return None

    response = result.read()
    #tree = html.fromstring(response)
    tree = html.fromstring('<?xml version="1.0" encoding="utf-8"?>' + response)
    entity_list = tree.xpath('table[@class="tbl_gray mt5"]//tbody//tr')

    store_list = []
    for i in range(len(entity_list)):
        info_list = entity_list[i].xpath('.//td')
        if len(info_list) < 5: continue  # 최소 필드 수 체크

        store_info = {}
        store_info['name'] = '폴더'

        store_info['subname'] = ''
        store_info['feat'] = ''
        strtemp = "".join(info_list[1].itertext())
        if strtemp != None:
            strtemp = strtemp.replace('\r', '').replace('\t', '').replace('\n', '').rstrip().lstrip()
            if strtemp.startswith('미니폴더'):
                store_info['feat'] = '미니폴더'
                strtemp = strtemp[4:].lstrip()
                if strtemp.startswith('_'): strtemp = strtemp[1:].lstrip()
            if strtemp.endswith('미니폴더'):
                store_info['feat'] = '미니폴더'
                strtemp = strtemp[:-4].rstrip()
                if strtemp.endswith('_'): strtemp = strtemp[:-1].rstrip()

            if not strtemp.endswith('점'): strtemp += '점'

            store_info['subname'] = strtemp

        store_info['newaddr'] = ''
        strtemp = "".join(info_list[2].itertext())
        if strtemp != None:
            strtemp = strtemp.replace('\r', '').replace('\t', '').replace('\n', '').rstrip().lstrip()
            store_info['newaddr'] = strtemp

        store_info['pn'] = ''
        strtemp = "".join(info_list[3].itertext())
        if strtemp != None:
            strtemp = strtemp.replace('\r', '').replace('\t', '').replace('\n', '').rstrip().lstrip()
            store_info['pn'] = strtemp.replace(' ', '').replace(')', '-').replace('.', '-')

        store_info['ot'] = ''
        strtemp = "".join(info_list[4].itertext())
        if strtemp != None:
            strtemp = strtemp.replace('\r', '').replace('\t', '').replace('\n', '').rstrip().lstrip()
            store_info['ot'] = strtemp

        store_list += [store_info]

    return store_list


def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)


if __name__ == '__main__':
    main()
