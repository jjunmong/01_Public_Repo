import sys
import codecs
import requests
import bs4
import random
import time

def main():

    outfile = codecs.open('49_부동산114.txt', 'w', 'utf-8')
    outfile.write("GUBUN|NAME|ADDR|DATE1|DATE2\n")

    sido_list = ['서울특별시', '경기도', '강원도', '충청북도', '충청남도', '경상북도', '경상남도', '전라북도', '전라남도', '인천광역시', '대전광역시', '울산광역시',
                 '광주광역시', '대구광역시', '부산광역시', '세종특별자치시', '제주특별자치도']
    for sido in sido_list:
        for num in range(2,6):
            page = 1
            while True:
                store_list = getStoreInfo(sido,page, num)
                if store_list == [] : break
                for store in store_list:
                        outfile.write(u'%s|' % store['gubun'])
                        outfile.write(u'%s|' % store['name'])
                        outfile.write(u'%s|' % store['addr'])
                        outfile.write(u'%s|' % store['date1'])
                        outfile.write(u'%s\n' % store['date2'])
                page += 1
        time.sleep(random.uniform(0.3, 0.9))

    outfile.close()

def getStoreInfo(sido,intPageNo,tabGubun):
    url = 'https://www.r114.com/?_c=lots&_s=info&_m=infolist&_a=index.ajax'
    data ={
        # 'page': '2',
        'Metro': '서울특별시',
        'County': '',
        'Town': '',
        'sortTag': '사업단계',
        'sortTag2': 'DESC',
        'tabGubun': '2',
        'filterParam1': '',
        'filterParam3': '전체',
        'filterParam4': '',
        'filterParam5': '',
        'filterParam6': '',
        'filterParam7': '',
    }
    data['page'] = intPageNo
    data['tabGubun'] = tabGubun
    data['Metro'] = sido
    headers = {
        'Accept': '*/*',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Content-Length': '244',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'Cookie': 'ASPSESSIONIDCSDDRACT=GKENFEKBOEGKNEOLFJADDHMP; ACEUACS=1579483474047131591; ACEFCID=UID-5EEC246F7D6F066E97814CD7; ACEUCI=1; ACEUCI2=1; nvtk=; _ga=GA1.2.2052223262.1592534128; _gid=GA1.2.1212462034.1592534128; foot_navi=opennavi; Memul%5FComplexNm=; Memul%5FComplexCd=; Memul%5FCortarNo=1100000000; fCode=AA%7CAB; Memul%5FAddr=%EC%84%9C%EC%9A%B8%ED%8A%B9%EB%B3%84%EC%8B%9C%7C%7C%7C126%2E9786567859313%7C37%2E566826005485716; Memul%5FMemulType2=01; Memul%5FMemulType1=A01; Memul%5FMemulStyle=0; wcs_bt=8c647232a98f8:1592534204|55e2425a0e97f4:1592534127; _ACU100396=1592534128829131597.1592534206434.1.0.131597M4UIUTK3BAU46.0.0.0.....; _ACR0=b5bf73baf0bb36d94ea044e8d160542777bdf9f4; _ACS100396=1140',
        'Host': 'www.r114.com',
        'Origin': 'https://www.r114.com',
        'Pragma': 'no-cache',
        'Referer': 'https://www.r114.com/?_c=lots&_s=info&_m=infolist',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36',
        'X-Requested-With': 'XMLHttpRequest',
    }
    try:
        pageString = requests.post(url, data = data, headers = headers).text
        bsObj = bs4.BeautifulSoup(pageString,"html.parser")
        print(sido, intPageNo, tabGubun)
        tbody = bsObj.find('tbody',{"class":"InfoList"})
        tr = tbody.find_all('tr')
    except : pass
    result = []
    for info in tr:
        try:
            infos = info['data-info']
            infos = str(infos).split('$')
            gubun = infos[0]
            name = infos[1]
            addr = infos[2]+ ' ' + infos[3]+ ' ' + infos[4]+ ' ' + infos[5]
            date1 = infos[9]
            date2 = infos[10]
        except: pass
        else:
            result.append({"gubun":gubun,"name":name,"addr":addr,"date1":date1,"date2":date2})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()

import sys
import time
import codecs
import requests
import random
import json
import bs4

def main():

    outfile = codecs.open('01_미래에셋대우.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|XCORD|YCORD\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        if store_list ==[] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s|' % store['xcord'])
            outfile.write(u'%s\n' % store['ycord'])
        page += 1
        time.sleep(random.uniform(0.3,0.6))

    outfile.close()

def getStoreInfo(page):
    url = 'https://www.miraeassetdaewoo.com/mw/mki/mki3096/a01.json'
    data = {
        'searchText': '',
        'divNo': '',
        # 'currentPage': '1',
    }
    data['currentPage'] = page
    pageString = requests.post(url , data = data).text
    print(page)
    jsonString = json.loads(pageString)
    entityList  = jsonString['branchList']
    result =[]
    for info in entityList:
        name = '미래에셋대우'
        branch = info['BR_NM'].replace(' (사전 예약제 운영)','')
        addr = info['ADDR']
        tell = info['BBR_TEL_NO']
        xcord = info['LOCT_LONGITUDE']
        ycord =info['LOCT_LATITUDE']
        result.append({"name":name,"branch":branch,"addr":addr,"tell":tell,"xcord":xcord,"ycord":ycord})

    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()import sys
import time
import codecs
import requests
import random
import json
import bs4
from selenium import webdriver

def main():

    outfile = codecs.open('02_롯데호텔.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    store_list = getStoreInfo()
    for store in store_list:
        outfile.write(u'%s|' % store['name'])
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s|' % store['addr'])
        outfile.write(u'%s\n' % store['tell'])

    outfile.close()

def getStoreInfo():
    url = 'https://www.lottehotel.com/global/ko/hotel-finder.html'
    pageString = requests.get(url)
    bsObj = bs4.BeautifulSoup(pageString.content,"html.parser")
    li = bsObj.find_all('li',{"class":"d596-hotel__item"})
    result =[]
    for info in li:
        try:
            name = '롯데호텔'
            branch = info.find('strong').text.replace('\n','').replace(' ','')
            addr = info.find('p',{"class":"d596-hotel__address"}).text.replace('\n','')
            tell = info.find('p',{"class":"d596-hotel__tel"}).text.replace(' ','').replace('+82-','0').replace('\n','').replace('전화걸기','')
        except: pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})

    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()import sys
import time
import codecs
import requests
import random
import json
import bs4
from selenium import webdriver

def main():

    outfile = codecs.open('03_베니키아호텔.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|ROOMCNT|HOTELNO\n")

    store_list = getStoreInfo()
    for store in store_list:
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s|' % store['addr'])
        outfile.write(u'%s|' % store['tell'])
        outfile.write(u'%s|' % store['roomcnt'])
        outfile.write(u'%s\n' % store['hotelNo'])

    outfile.close()

def getStoreInfo():
    url = 'https://www.benikea.com/common/proxy.jsp'
    data = {
        'url': 'http://api.benikea.com/hotel/getChainHotels',
        'langCd': 'KOR',
        'channelCd': '0000000001',
        'regionCd': '1',
        'sort': '4',
    }
    pageString = requests.post(url, data = data).text
    jsonString = json.loads(pageString)
    entityList = jsonString['data']['hotelList']
    result = []
    for info in entityList:
        branch = info['hotelNm']
        if branch.endswith('호텔'): branch = branch.replace('호텔', '').replace('베니키아', '베니키아호텔|').replace(' ','')
        else: branch = branch.replace(' ','').replace('호텔','호텔|').replace('베니키아홈더제주리조트','베니키아호텔|홈더제주리조트')
        addr = info['addrName']
        tell = info['bsnsTelNo']
        roomcnt = info['roomCnt']
        hotelNo = info['hotelNo']
        result.append({"branch":branch,"addr":addr,"tell":tell,"roomcnt":roomcnt,"hotelNo":hotelNo})

    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()import sys
import time
import codecs
import requests
import random
import json
import bs4
from selenium import webdriver

def main():

    outfile = codecs.open('04_이비스호텔.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|XCORD|YCORD\n")

    store_list = getStoreInfo_1()
    for store in store_list:
        outfile.write(u'%s|' % store['name'])
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s|' % store['addr'])
        outfile.write(u'%s|' % store['tell'])
        outfile.write(u'%s|' % store['xcord'])
        outfile.write(u'%s\n' % store['ycord'])

    store_list = getStoreInfo_2()
    for store in store_list:
        outfile.write(u'%s|' % store['name'])
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s|' % store['addr'])
        outfile.write(u'%s|' % store['tell'])
        outfile.write(u'%s|' % store['xcord'])
        outfile.write(u'%s\n' % store['ycord'])

    store_list = getStoreInfo_3()
    for store in store_list:
        outfile.write(u'%s|' % store['name'])
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s|' % store['addr'])
        outfile.write(u'%s|' % store['tell'])
        outfile.write(u'%s|' % store['xcord'])
        outfile.write(u'%s\n' % store['ycord'])

    outfile.close()

def getStoreInfo_1():
    url = 'https://www.ambatel.com/ko/hotel/selBrandHotelList.do?page=1&selBrandCode=&PROD_TYPE=M0801%2523%2523%2523M0802&USE_YN=Y&brandHotelList=H0020&_=1585112484879'
    pageString = requests.get(url).text
    jsonString = json.loads(pageString)
    entityList = jsonString['hotel_list']
    result = []
    for info in entityList:
        name = info['HOTEL_BRAND_NM']
        branch = info['BRANCH_NAME']
        addr = info['BRANCH_ADDRESS']
        tell = info['BRANCH_TEL']
        xcord = info['LONGITUDE']
        ycord = info['LATITUDE']
        result.append({"name":name,"branch":branch,"addr":addr,"tell":tell,"xcord":xcord,"ycord":ycord})

    return result


def getStoreInfo_2():
    url = 'https://www.ambatel.com/ko/hotel/selBrandHotelList.do?page=1&selBrandCode=&PROD_TYPE=M0801%2523%2523%2523M0802&USE_YN=Y&brandHotelList=H0060&_=1585116293185'
    pageString = requests.get(url).text
    jsonString = json.loads(pageString)
    entityList = jsonString['hotel_list']
    result = []
    for info in entityList:
        name = info['HOTEL_BRAND_NM']
        branch = info['BRANCH_NAME']
        addr = info['BRANCH_ADDRESS']
        tell = info['BRANCH_TEL']
        xcord = info['LONGITUDE']
        ycord = info['LATITUDE']
        result.append({"name":name,"branch":branch,"addr":addr,"tell":tell,"xcord":xcord,"ycord":ycord})

    return result


def getStoreInfo_3():
    url = 'https://www.ambatel.com/ko/hotel/selBrandHotelList.do?page=1&selBrandCode=&PROD_TYPE=M0801%2523%2523%2523M0802&USE_YN=Y&brandHotelList=H0050&_=1585116293186'
    pageString = requests.get(url).text
    jsonString = json.loads(pageString)
    entityList = jsonString['hotel_list']
    result = []
    for info in entityList:
        name = info['HOTEL_BRAND_NM']
        branch = info['BRANCH_NAME']
        addr = info['BRANCH_ADDRESS']
        tell = info['BRANCH_TEL']
        xcord = info['LONGITUDE']
        ycord = info['LATITUDE']
        result.append({"name":name,"branch":branch,"addr":addr,"tell":tell,"xcord":xcord,"ycord":ycord})

    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()import sys
import time
import codecs
import requests
import random
import json
import bs4
from selenium import webdriver

def main():

    outfile = codecs.open('05_노보텔호텔.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|XCORD|YCORD\n")

    store_list = getStoreInfo()
    for store in store_list:
        outfile.write(u'%s|' % store['name'])
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s|' % store['addr'])
        outfile.write(u'%s|' % store['tell'])
        outfile.write(u'%s|' % store['xcord'])
        outfile.write(u'%s\n' % store['ycord'])

    outfile.close()

def getStoreInfo():
    url = 'https://www.ambatel.com/ko/hotel/selBrandHotelList.do?page=1&selBrandCode=&PROD_TYPE=M0801%2523%2523%2523M0802&USE_YN=Y&brandHotelList=H0010&_=1585116545558'
    pageString = requests.get(url).text
    jsonString = json.loads(pageString)
    entityList = jsonString['hotel_list']
    result = []
    for info in entityList:
        name = info['HOTEL_BRAND_NM']
        branch = info['BRANCH_NAME']
        addr = info['BRANCH_ADDRESS']
        tell = info['BRANCH_TEL']
        xcord = info['LONGITUDE']
        ycord = info['LATITUDE']
        result.append({"name":name,"branch":branch,"addr":addr,"tell":tell,"xcord":xcord,"ycord":ycord})

    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()import sys
import time
import codecs
import requests
import random
import json
import bs4
from selenium import webdriver

def main():

    outfile = codecs.open('06_빕스.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|OLDADDR|NEWADDR|TELL|TIME|PARKIMG\n")

    stores = getStoreListAll()
    for list in stores:
        store_list = getStoreInfo(list)
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['oldaddr'])
            outfile.write(u'%s|' % store['newaddr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s|' % store['time'])
            outfile.write(u'%s\n' % store['parking'])

    outfile.close()

def getStoreList(pageNo):
    url = 'https://www.ivips.co.kr:7002/store/storeStoreInfoQ.asp?pageseq={}'.format(pageNo)
    pageString = requests.get(url).text
    print(url , pageNo)
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    tbody = bsObj.find('tbody')
    tr = tbody.find_all('tr')
    result = []
    for info in tr:
        try :
            a = info.find('a')['href']
            a= str(a).split("'")[1]
        except :
            pass
        else :
            result.append(a)
    return result

def getStoreListAll():
    result = []
    page = 1
    while True:
        if getStoreList(page) == [] : break
        result = result + getStoreList(page)
        page += 1

    results = list(set(result))

    return results
def getStoreInfo(list_code):
    url = 'https://www.ivips.co.kr:7002/store/storeStoreDetailPrt.asp'
    data = {
        'compCD': 'vips',
        # 'JUMCODE': 'SH0074',
        'pageseq': '3',
        'premier_type': '',
        'store_type': '',
        'taste_type': '',
        'dlight_type': '',
        'onebir_type': '',
        'lactation_type': '',
        'play_type': '',
        'kids_type': '',
        'event_room': '',
        'seminar_room': '',
        'wifi': '',
        'house_wedding': '',
        'jumname': '',
        'city': '',
    }
    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'max-age=0',
        'Connection': 'keep-alive',
        'Content-Length': '207',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cookie': 'ASPSESSIONIDQARCBATD=DBCAAOGBBNEPICKDIAHGDEDE; ACEFCID=UID-5E7C4FE06119D705155D2CAD; _ga=GA1.3.1677209801.1585205217; _gid=GA1.3.1371865254.1585205217',
        'Host': 'www.ivips.co.kr:7002',
        'Origin': 'https://www.ivips.co.kr:7002',
        'Referer': 'https://www.ivips.co.kr:7002/store/storeStoreInfoQ.asp?pageseq=3',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',
    }
    data['JUMCODE'] = list_code
    pageString = requests.post(url, data = data).text
    print(url,list_code)
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    result = []
    name = 'VIPS'
    branch = bsObj.select('#content > div > div.stInfo > div.clfix > h5')
    branch = str(branch).replace('[','').replace(']','').replace('<h5>','').replace('</h5>','').replace(' ','')
    addr = bsObj.select('#content > div > div.stInfo > table > tbody > tr:nth-child(3) > td')
    addr = str(addr).replace('[', '').replace(']', '').replace('<td>','').replace('</td>','').replace('<br/>','').replace('도로명주소 : ','').replace(' 지번주소 : ','|')
    addr = addr.split('|')
    try:
        oldaddr = addr[1]
    except:
        oldaddr = ''
    newaddr = addr[0]
    tell = bsObj.select('#content > div > div.stInfo > table > tbody > tr:nth-child(2) > td')
    tell = str(tell).replace('[', '').replace(']', '').replace('<td>','').replace('</td>','').replace('\n','').replace('\t','').replace('\xa0','').replace(',',' /')
    time = bsObj.select('#content > div > div.stInfo > table > tbody > tr:nth-child(5) > td')
    time = str(time).replace('[', '').replace(']', '').replace('<td>','').replace('</td>','')
    parking = bsObj.select('#content > div > div.stInfo > table > tbody > tr:nth-child(7) > td')
    parking = str(parking).replace('[', '').replace(']', '').replace('<td>','').replace('</td>',' ')
    result.append({"name":name, "branch":branch,"oldaddr":oldaddr,'newaddr':newaddr,"tell":tell,"time":time,"parking":parking})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()import sys
import time
import codecs
import requests
import random
import json
import bs4

def main():

    outfile = codecs.open('07_맥시칸치킨.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|NEWADDR|OLDADDR|TELL|XCORD|YCORD\n")

    stores = getStoreList_all()
    for list in stores:
        store_list = getStoreInfo(list)
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s|' % store['xcord'])
            outfile.write(u'%s\n' % store['ycord'])

    outfile.close()

def getStoreList(pageNo):
    url = 'http://www.mexican.co.kr/2020/skin/store/flashmap.html?&pno={}'.format(pageNo)
    pageString = requests.get(url).text
    print(url , pageNo)
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    tbody = bsObj.find('tbody')
    tr = tbody.find_all('tr')
    result = []
    for info in tr :
        try :
            a = info.find('a')['href']
            a = str(a).replace('#','')
        except:
            pass
        else:
            result.append(a)
    return result

def getStoreList_all():
    result = []
    page = 1
    while True :
        if getStoreList(page) == []: break
        result = result + getStoreList(page)

        page += 1
    results = list(set(result))
    return results

def getStoreInfo(pageInfo):
    url = 'http://www.mexican.co.kr/2020/skin/store/{}'.format(pageInfo)
    pageString = requests.get(url).text
    print(url,pageInfo)
    bsObj = bs4.BeautifulSoup(pageString, "html.parser")
    result = []
    name = '맥시칸치킨'
    branch = bsObj.select('body > div.storeview > div.storedetail > div.nametitle > h1')
    branch = str(branch).replace('[','').replace(']','').replace('<h1>','').replace('</h1>','')
    infos = bsObj.select('body > div.storeview > div.storedetail > p')
    infos = str(infos).split('/')
    addr = infos[1].replace('strong>','').replace('<br','')
    tell = infos[3].replace('strong>','').replace(' ','')
    cord = bsObj.select('script')
    cord = str(cord).split(',')
    xcord = cord[4:5]
    xcord = str(xcord).replace("[","").replace(")']","").replace("'","")
    ycord = cord[3:4]
    ycord = str(ycord).replace("[' {\\n\\t\\t\\tcenter: new daum.maps.LatLng(","").replace("]","").replace("'","").replace('}','')
    result.append({"name":name, "branch":branch,"addr":addr,"tell":tell,"xcord":xcord,"ycord":ycord})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()import sys
import time
import codecs
import requests
import random
import json
import bs4
from selenium import webdriver

def main():

    outfile = codecs.open('08_토마토도시락.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        if store_list ==[] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])
        page +=1

    outfile.close()

def getStoreInfo(pageNo):
    url = 'http://www.tomatodosirak.co.kr/board/index.php?board=map_01&sca=all&type=list&select=&search=&page={}'.format(pageNo)
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(url, pageNo)
    ul = bsObj.find('ul',{"class":"store_ul"})
    li = ul.find_all('li')
    result = []
    for info in li :
        try:
            name = '토마토도시락'
            branch = info.find('p',{"class":"store_name"}).text.lstrip().rstrip()
            addr =  info.find('dd',{"class":"addr ellipsis"}).text.lstrip().rstrip()
            tell =  info.find('dd',{"class":"tel ellipsis"}).text.replace(')','-').lstrip().rstrip()
        except:
            pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})

    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()import sys
import time
import codecs
import requests
import random
import json
import bs4

def main():

    outfile = codecs.open('09_닭익는마을.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|XCORD|YCORD\n")

    store_list = getStoreInfo()
    for store in store_list:
        outfile.write(u'%s|' % store['name'])
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s|' % store['addr'])
        outfile.write(u'%s|' % store['tell'])
        outfile.write(u'%s|' % store['xcord'])
        outfile.write(u'%s\n' % store['ycord'])

    outfile.close()

def getStoreInfo():
    url = 'https://www.ckpalace.co.kr/shop/shopListJs.asp'
    data = {
        'lat': '37.494839',
        'lng': '127.121911',
        'search_text': '',
    }
    pageString = requests.post(url, data = data).text
    jsonString = json.loads(pageString)
    result = []
    for info in jsonString:
        name = '닭익는마을'
        branch = info['branch_name']
        addr = info['branch_address']
        tell = info['branch_tel']
        xcord = info['wgs84_x']
        ycord = info['wgs84_y']
        result.append({"name":name, "branch":branch,"addr":addr,"tell":tell,"xcord":xcord,"ycord":ycord})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import time
import codecs
import requests
import random
import json
import bs4

# sido_list = ['서울특별시', '경기도', '강원도', '충청북도', '충청남도', '경상북도', '경상남도', '전라북도', '전라남도', '인천광역시', '대전광역시', '울산광역시', '광주광역시', '대구광역시', '부산광역시', '세종특별자치시', '제주특별자치도']

def main():

    outfile = codecs.open('14_위니아에이드서비스센터.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|NEWADDR|OLDADDR|TELL|TIME\n")

    page = 1
    while True:
        store_list = getStoreInfo_svc(page)
        if store_list == [] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['newaddr'])
            outfile.write(u'%s|' % store['oldaddr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s\n' % store['time'])
        page += 1
    outfile.close()

    outfile = codecs.open('14_위니아에이드매장.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|NEWADDR|OLDADDR|TELL|TIME\n")

    page = 1
    while True:
        store_list = getStoreInfo_shop(page)
        if store_list == []: break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['newaddr'])
            outfile.write(u'%s|' % store['oldaddr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s\n' % store['time'])
        page += 1
    outfile.close()


def getStoreInfo_svc(pageNo):
    url = 'https://www.winiadimchae.com/support/system_ajax.jsp'
    data = {
        'ORDER': 'SEARCH',
        '_SIDO': '',
        'SEARCH_VALUE': '',
        # 'nowPage': '1',
        'type': '2',
    }
    data['nowPage'] = pageNo
    pageString = requests.post(url, data=data).text
    bsObj = bs4.BeautifulSoup(pageString, "html.parser")
    li = bsObj.find_all('li')
    result = []
    for info in li:
        try:
            name = '위니아에이드'
            branch = info.find('a').text
            addr = info.find('p').text
            addr = addr.split('(지번)')
            newaddr = addr[0]
            oldaddr = addr[1]
            tell = info.find('p', {"class": "phone"}).text
            time = info.find('p', {"class": "store_info"}).text
        except:pass
        else:
            result.append({"name": name, "branch": branch, "newaddr": newaddr, "oldaddr": oldaddr, "tell": tell, "time": time})
    return result

def getStoreInfo_shop(pageNo):
    url = 'https://www.winiadimchae.com/support/system_ajax.jsp'
    data = {
        'ORDER': 'SEARCH',
        '_SIDO': '',
        'SEARCH_VALUE': '',
        # 'nowPage': '1',
        'type': '1',
    }
    data['nowPage'] = pageNo
    pageString = requests.post(url, data = data).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    li = bsObj.find_all('li')
    result = []
    for info in li:
        try:
            name = '위니아에이드'
            branch = info.find('a').text
            addr = info.find('p').text
            addr = addr.split('(지번)')
            newaddr = addr[0]
            oldaddr = addr[1]
            tell = info.find('p', {"class": "phone"}).text
            time = info.find('p', {"class": "store_info"}).text
        except:pass
        else:
            result.append({"name": name, "branch": branch, "newaddr": newaddr, "oldaddr": oldaddr, "tell": tell, "time": time})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import time
import codecs
import requests
import random
import json
import bs4

# sido_list = ['서울특별시', '경기도', '강원도', '충청북도', '충청남도', '경상북도', '경상남도', '전라북도', '전라남도', '인천광역시', '대전광역시', '울산광역시', '광주광역시', '대구광역시', '부산광역시', '세종특별자치시', '제주특별자치도']
sido_code = ['0','1','2','3','4','5','6','7']
def main():

    outfile = codecs.open('12_TG삼보서비스센터.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|XCORD|YCORD\n")

    for sido in sido_code:
        store_list = getStoreInfo(sido)
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s|' % store['xcord'])
            outfile.write(u'%s\n' % store['ycord'])

    outfile.close()

def getStoreInfo(sidoCode):
    url = 'https://www.trigem.co.kr/customer/ascenter/ascenter.jsp'
    data ={}
    data['province'] = sidoCode
    print(url, sidoCode)
    pageString = requests.post(url, data = data).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    tr = bsObj.find_all('tr',{"class":"board_list2"})
    result = []
    for info in tr:
        try:
            name = 'TG삼보서비스센터'
            branch = info.find('td',{"align":"center"}).text
            addr = info.find('td',{"align":"left"}).text
            cord = info.find('a')['href']
            cord = str(cord).split('&')
            xcord = cord[3]
            xcord = str(xcord).replace('x=','')
            if xcord.startswith('q') == True : xcord = str(cord[2]).replace('lng=','')
            elif branch == 'TGS동래센터' : xcord =''
            ycord = cord[4]
            ycord = str(ycord).replace('y=', '')
            if ycord.startswith('t') == True: ycord = str(cord[1]).replace('lat=', '')
            elif branch == 'TGS동래센터': ycord = ''
        except:
            pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr,"xcord":xcord,"ycord":ycord})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import time
import codecs
import requests
import random
import json
import bs4

# sido_list = ['서울특별시', '경기도', '강원도', '충청북도', '충청남도', '경상북도', '경상남도', '전라북도', '전라남도', '인천광역시', '대전광역시', '울산광역시', '광주광역시', '대구광역시', '부산광역시', '세종특별자치시', '제주특별자치도']

def main():

    outfile = codecs.open('13_SKY서비스센터.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR\n")

    store_list = getStoreInfo()
    for store in store_list:
        outfile.write(u'%s|' % store['name'])
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s\n' % store['addr'])

    outfile.close()

def getStoreInfo():
    url = 'http://shop1.skyxgood.cafe24.com/front/php/b/board_list.php?board_no=5&is_pcver=T'
    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'max-age=0',
        'Connection': 'keep-alive',
        'Cookie': 'cuk_ubp=CUK_8274B71D2_1579236398; _ga=GA1.2.1044662437.1581474233; _hjid=b25ba6f3-08e8-463d-96e3-27efe64026f1; CUK45=cuk45_skyxgood_08c0c16d79da4d49adeaad91199dcbb0; CUK2Y=cuk2y_skyxgood_08c0c16d79da4d49adeaad91199dcbb0; ECSESSID=388dd0b66b451eb350f2b0a42e2771fe; is_pcver=T; is_mobile_force=F; EC_MOBILE_DEVICE=1; basketcount_1=0; atl_epcheck=1; atl_option=1%2C1%2CH; CID=CID89c6477ae781b2bc1c00b42c1c0a470d; CID89c6477ae781b2bc1c00b42c1c0a470d=dd444e2dbc5182804b7f782502ff383d%3A%3A%3A%3A%3A%3Ahttp%3A%2F%2Fisky.co.kr%2F%3A%3A%3A%3A4%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%2Ffront%2Fphp%2Fb%2Fboard_list.php%3Fboard_no%3D5%26is_pcver%3DT%3A%3A1586762475%3A%3A%3A%3Appdp%3A%3A1586762475%3A%3A%3A%3A%3A%3A%3A%3A; EC_BR=13; vt=1586762512',
        'Host': 'shop1.skyxgood.cafe24.com',
        'Referer': 'http://shop1.skyxgood.cafe24.com/front/php/b/board_list.php?board_no=1002&is_pcver=T',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36',
    }
    pageString = requests.get(url, headers = headers).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    tr = bsObj.find_all('tr',{"class":"xans-record-"})
    result = []
    for info in tr:
        name = 'SKY서비스센터'
        branch = info.select('td')[1]
        branch = str(branch).replace('<td class="">','').replace('</td>','')
        addr = info.find('td',{"class":"subject left txtBreak"}).text.replace('\n','').rstrip().lstrip()
        result.append({"name":name,"branch":branch,"addr":addr})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import time
import codecs
import requests
import random
import json
import bs4

# sido_list = ['서울특별시', '경기도', '강원도', '충청북도', '충청남도', '경상북도', '경상남도', '전라북도', '전라남도', '인천광역시', '대전광역시', '울산광역시', '광주광역시', '대구광역시', '부산광역시', '세종특별자치시', '제주특별자치도']

def main():

    outfile = codecs.open('14_위니아에이드서비스센터.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|NEWADDR|OLDADDR|TELL|TIME\n")

    page = 1
    while True:
        store_list = getStoreInfo_svc(page)
        if store_list == [] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['newaddr'])
            outfile.write(u'%s|' % store['oldaddr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s\n' % store['time'])
        page += 1
    outfile.close()

    outfile = codecs.open('14_위니아에이드매장.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|NEWADDR|OLDADDR|TELL|TIME\n")

    page = 1
    while True:
        store_list = getStoreInfo_store(page)
        if store_list == []: break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['newaddr'])
            outfile.write(u'%s|' % store['oldaddr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s\n' % store['time'])
        page += 1
    outfile.close()


def getStoreInfo_svc(pageNo):
    url = 'https://www.winiasls.com/support/store/item'
    data = {
        'divideType': '2',
        'sido': '',
        'storeName': '',
        'storeDiv': '',
        'storeSeq': '',
        # 'pageIndex': '1',
    }
    data['pageIndex'] = pageNo
    headers = {
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Connection': 'keep-alive',
        'Content-Length': '61',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'Cookie': '_BS_GUUID=ybjIEz4HRAH9vZIksj0mHX5iVmeEFWrd7KWMk1tc; _TRK_CR=https%3A%2F%2Fwww.winiasls.com%2Fsupport%2Fshop; JSESSIONID=0000lfymepupQNsgUyNC5wCqv33:-1; _TRK_UID=18eb688d4fd10949e78550fb5b00e033:3:0.3074625733024691:1586843463120; _TRK_SID=660edb1140cac7a01ec2dc631ae10403; _TRK_EX=2',
        'Host': 'www.winiasls.com',
        'Origin': 'https://www.winiasls.com',
        'Referer': 'https://www.winiasls.com/support/service',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36',
        'X-Requested-With': 'XMLHttpRequest',
    }
    pageString = requests.post(url, data = data, headers = headers).text
    print(url, pageNo, "svc")
    jsonString = json.loads(pageString)
    entitydata = jsonString['list']
    result = []
    for info in entitydata:
        name = '위니아에이드'
        branch = info['storeName']
        branch = str(branch).replace('위니아에이드 ','')
        sido = info['sido']
        gugun = info['gugun']
        new_addr_info = info['newAddr']
        old_addr_info = info['detailAddr']
        newaddr = sido + " " + gugun + " " + new_addr_info
        oldaddr = sido + " " + gugun + " " + old_addr_info
        tell = info['tel']
        time = info['workTime']
        result.append({"name":name,"branch":branch,"newaddr":newaddr,"oldaddr":oldaddr,"tell":tell,"time":time})
    return result

def getStoreInfo_store(pageNo):
    url = 'https://www.winiasls.com/support/store/item'
    data = {
        'divideType': '1',
        'sido': '',
        'storeName': '',
        'storeDiv': '',
        'storeSeq': '',
        # 'pageIndex': '1',
    }
    data['pageIndex'] = pageNo
    headers = {
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Connection': 'keep-alive',
        'Content-Length': '61',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'Cookie': '_BS_GUUID=ybjIEz4HRAH9vZIksj0mHX5iVmeEFWrd7KWMk1tc; _TRK_CR=https%3A%2F%2Fwww.winiasls.com%2Fsupport%2Fshop; JSESSIONID=0000lfymepupQNsgUyNC5wCqv33:-1; _TRK_UID=18eb688d4fd10949e78550fb5b00e033:3:0.3074625733024691:1586843463120; _TRK_SID=660edb1140cac7a01ec2dc631ae10403; _TRK_EX=2',
        'Host': 'www.winiasls.com',
        'Origin': 'https://www.winiasls.com',
        'Referer': 'https://www.winiasls.com/support/service',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36',
        'X-Requested-With': 'XMLHttpRequest',
    }
    pageString = requests.post(url, data = data, headers = headers).text
    print(url, pageNo, "store")
    jsonString = json.loads(pageString)
    entitydata = jsonString['list']
    result = []
    for info in entitydata:
        name = '위니아에이드'
        branch = info['storeName']
        branch = str(branch).replace('위니아에이드 ','')
        sido = info['sido']
        gugun = info['gugun']
        if gugun == None : gugun = ''
        new_addr_info = info['newAddr']
        old_addr_info = info['detailAddr']
        newaddr = sido + " " + gugun + " " + new_addr_info
        oldaddr = sido + " " + gugun + " " + old_addr_info
        tell = info['tel']
        time = info['workTime']
        result.append({"name":name,"branch":branch,"newaddr":newaddr,"oldaddr":oldaddr,"tell":tell,"time":time})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import time
import codecs
import requests
import random
import json
import bs4

# sido_list = ['서울특별시', '경기도', '강원도', '충청북도', '충청남도', '경상북도', '경상남도', '전라북도', '전라남도', '인천광역시', '대전광역시', '울산광역시', '광주광역시', '대구광역시', '부산광역시', '세종특별자치시', '제주특별자치도']

def main():

    outfile = codecs.open('15_주연테크.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    store_list = getStoreInfo()
    for store in store_list:
        outfile.write(u'%s|' % store['name'])
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s|' % store['addr'])
        outfile.write(u'%s\n' % store['tell'])
    outfile.close()

def getStoreInfo():
    url = 'https://www.jooyon.co.kr/center.php'
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    tbody = bsObj.select('tbody')[2]
    tr = tbody.find_all('tr')
    result = []
    for info in tr:
        name = '주연테크'
        branch = info.select('td')[2]
        branch = str(branch).replace('<td>','').replace('</td>','').lstrip().rstrip()
        addr = info.select('td')[4]
        addr = str(addr).replace('<td class="jy_hide">','').replace('</td>','')
        tell = info.select('td')[3]
        tell = str(tell).replace('<td>','').replace('</td>','')
        result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import time
import codecs
import requests
import random
import json
import bs4

def main():

    outfile = codecs.open('16_LGU플러스.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|NEWADDR|OLDADDR|TELL\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        if store_list == [] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['newaddr'])
            outfile.write(u'%s|' % store['oldaddr'])
            outfile.write(u'%s\n' % store['tell'])
        page += 5

    outfile.close()

def getStoreInfo(intpageNo):
    url = 'http://www.uplus.co.kr/css/sinf/brsc/RetrievePosPageSearch.hpi'
    data = {
        'targetRow': '',
        'sido': '',
        'sigungu': '',
        'dongnm': '',
        'dongInput': '',
        'roadviewyn': '',
        # 'devonTargetRow': '6',
        'devonOrderBy': '',
    }
    data['devonTargetRow'] = intpageNo
    pageString = requests.post(url, data = data).text
    print(url , data)
    bsObj = bs4.BeautifulSoup(pageString, "html.parser")
    ul = bsObj.find('ul',{"class":"searchShopList nblist"})
    li = bsObj.select('li')
    # print(li)
    result = []
    for info in li:
        try:
            name = 'LGU플러스'
            branch = info.find('strong').text.replace('_','')
            newaddr = info.select('p')[0]
            newaddr = str(newaddr).replace('<p id="roadview0" style="display: block">','').replace('</p>','').replace('<p id="roadview1" style="display: block">','').replace('<p id="roadview2" style="display: block">','').replace('<p id="roadview3" style="display: block">','').replace('<p id="roadview4" style="display: block">','')
            oldaddr = info.select('p')[1]
            oldaddr = str(oldaddr).replace('<p id="jibunview0" style="display: none">','').replace('</p>','').replace('<p id="jibunview1" style="display: none">','').replace('<p id="jibunview2" style="display: none">','').replace('<p id="jibunview3" style="display: none">','').replace('<p id="jibunview4" style="display: none">','')
            tell = info.select('p')[2]
            tell = str(tell).replace('<p>T. ','').replace('</p>','')
        except :
            pass
        else:
            result.append({"name":name,"branch":branch,"newaddr":newaddr,"oldaddr":oldaddr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import time
import codecs
import requests
import random
import json
import bs4

def main():

    outfile = codecs.open('17_씨스페이스.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        if store_list == [] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s\n' % store['addr'])
        page += 1
        time.sleep(random.uniform(0.3, 0.9))

    outfile.close()

def getStoreInfo(intpageNo):
    url = 'http://cspace.co.kr/bbs/board.php?bo_table=location&page={}'.format(intpageNo)
    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Connection': 'keep-alive',
        'Cookie': 'PHPSESSID=81q5v1j33ev9iu9objm0jf3p65; 2a0d2363701f23f8a75028924a3af643=MTEyLjE2OS4zMy42Nw%3D%3D; ck_font_resize_rmv_class=; ck_font_resize_add_class=; mi_log_vi=EIAQM6QDQ3z4KJIQM7IEX11y; e1192aefb64683cc97abb83c71057733=bG9jYXRpb24%3D; mi_log_c=2020-04-20%2017%3A41%3A47',
        'Host': 'cspace.co.kr',
        'Referer': 'http://cspace.co.kr/bbs/board.php?bo_table=location',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36',
    }
    pageString = requests.get(url, headers = headers).text
    print(url, intpageNo)
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    tbody = bsObj.find('tbody')
    tr = tbody.find_all('tr')
    result = []
    for info in tr:
        try:
            name = '씨스페이스'
            infos = info.select('a')
            infos = str(infos).split(',')
            branch = infos[0]
            branch = str(branch).replace('[<a class="select_spot">','').replace('</a>','').replace(' ','')
            addr = infos[1]
            addr = str(addr).replace('<a class="select_spot">','').replace('</a>]','')
        except :
            pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import requests
import codecs
import time
import sys
import random
import bs4


def main():

    outfile = codecs.open('18_크린위드.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    page = 1
    while True :
        store_list = getStoreInfo(page)
        if store_list == [] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])
        page += 1
        time.sleep(random.uniform(0.3, 0.9))

    outfile.close()

def getStoreInfo(intPageNo):
    url = "http://www.cleanwith.co.kr/bbs/board.php?bo_table=findshop&page={}".format(intPageNo)
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString, "html.parser")
    print(url, intPageNo)
    tbody = bsObj.find('tbody')
    tr = tbody.find_all('tr')
    result = []
    for info in tr:
        try:
            name = '크린위드'
            branches = info.select('a')[2]
            branches = str(branches).split('>')
            branch = branches[1]
            branch = branch.replace('</a','').replace('\n','').replace(' ','').replace('크린위드','')
            addr = info.find('td',{"class":"td_branch_addr"}).text.replace(' / ','')
            tell = info.find('td',{"class":"td_branch_name"}).text
        except: pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()import sys
import time
import codecs
import requests
import random
import json
import bs4

def main():

    outfile = codecs.open('19_월드크리닝.txt', 'w', 'utf-8')
    outfile.write("ID|Ycord|Xcord|BRANCH|ADDR|TELL|TIME|ETC\n")
    sido_list = ['서울','경기','강원','충북','충남','경북','경남','전북','전남','인천','대전','울산','광주','대구','부산','세종','제주']

    for store in sido_list:
        store_list = getinfo(store)
        for store in store_list:
            outfile.write(u'%s\n' % store['infos'])

    outfile.close()

def getinfo(sido):
    url = 'http://www.worldcleaning.co.kr/use/ajax.shop.php'
    data = {
        'bound': '((33.68593973732815, 123.76868568071649), (40.521681472936486, 132.404425293687))',
        'shop_area': '서울',
        'shop_keyword': '',
    }
    print(url , sido)
    data['shop_area'] = sido
    jsonData = requests.post(url, data=data).text
    pageString = json.loads(jsonData)
    stringConvert4 = pageString['script']
    stringConvert3 = str(stringConvert4)
    stringConvert2 = stringConvert3.replace('"','').replace('</div>','').replace('</li>','').replace('</span>','')\
        .replace('\t','').replace('setMapPoint','').replace(";var locPosition = new daum.maps.LatLng(37.51625134859292, 127.10300624653243);map.setCenter(locPosition);","")\
    .replace("map.setCenter(locPosition);","").replace('\n','').replace(',','|').replace('(','').replace(')','')
    stringConvert = stringConvert2.split(';')
    result = []
    for ss in stringConvert:
        infos = ss
        result.append({"infos":infos})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()import requests
import codecs
import time
import sys
import random
import bs4
import json


def main():

    outfile = codecs.open('20_더샘.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|ID\n")

    page = 1
    while True :
        store_list = getStoreInfo(page)
        if store_list == [] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s\n' % store['id'])
        page += 1
        time.sleep(random.uniform(0.3, 0.9))

    outfile.close()

def getStoreInfo(intPageNo):
    url = "https://www.thesaemcosmetic.com/api/retail/local?q.area=&q.clsf=&q.retailKeyword=&currentPage={}".format(intPageNo)
    pageString = requests.get(url).text
    jsonString = json.loads(pageString)
    print(url, intPageNo)
    result = []
    for info in jsonString:
        try:
            id = info['id']
            name = '더샘'
            branch =info['name']
            branch = str(branch).replace(' ','')
            addr1 = info['addr1']
            addr2 = info['addr2']
            addr3 = info['addr3']
            addr = addr1 + ' ' + addr2 + ' ' + addr3
            tell = info['tel']
        except: pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell,"id":id})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()import sys
import time
import codecs
import requests
import random
import json
import bs4
from selenium import webdriver

def main():

    outfile = codecs.open('22_위니아24크린샵.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        if store_list ==[] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s\n' % store['addr'])

        page +=1

    outfile.close()
def getStoreInfo(intPageNo):
    url = "http://winia24cleanshop.com/frt/information/shopFind.do"
    params = {
        # 'page': '1',
        'recordSize': '5',
        'sid': '',
        'searchText1': '',
    }
    params['page'] = intPageNo
    pageString = requests.get(url, params = params).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(url, intPageNo)
    result = []
    try:
        ul = bsObj.find('ul',{"class":"list-con"})
        li = ul.find_all('li')
    except : pass
    else:
        for info in li:
            try:
                name = '위니아24크린샵'
                branch = info.find('strong').text.replace(' ','')
                addr = info.find('p').text
            except : pass
            else:
                result.append({"name":name,"branch":branch,"addr":addr})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()import sys
import time
import codecs
import requests
import random
import json
import bs4
from selenium import webdriver

def main():

    outfile = codecs.open('23_훌리카훌리카.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|TIME\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        if store_list ==[] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s\n' % store['time'])

        page +=1

    outfile.close()

def getStoreInfo(intPageNo):
    url = "http://www.holikaholika.co.kr/FrontStore/PointBBS/iBoardList.phtml?bbsid=pbbs_store&iCategory=0&_oSName=0&_oSSubject=0&_oSContents=0&_oSAddr=1&_oSearchText=%BC%AD%BF%EF&iPage={}".format(intPageNo)
    pageString = requests.get(url)
    bsObj = bs4.BeautifulSoup(pageString.content,"html.parser")
    print(url, intPageNo)
    ul = bsObj.find('ul',{"class":"ty_ul"})
    li = ul.find_all('li')
    result = []
    for info in li:
        try:
            name = '홀리카홀리카'
            branch = info.find('dt').text.replace(' ','')
            addr = info.find('span',{"class":"address"}).text.replace('주소 : ','')
            tell = info.find('em').text
            time = info.find('span',{"class":"time"}).text.replace('영업시간 : ','')
        except: pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell,"time":time})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import time
import codecs
import requests
import random
import json
import bs4
from selenium import webdriver

def main():

    outfile = codecs.open('24_구피샵.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|TIME\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        if store_list ==[] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s\n' % store['time'])

        page +=1

    outfile.close()

def getStoreInfo(intPageNo):
    url = "http://www.gupishop.com/bbs/board.php?bo_table=shop&page={}".format(intPageNo)
    headers ={
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Cookie': 'PHPSESSID=ds76ps2tjlgrvh479k6ogikqp0; e1192aefb64683cc97abb83c71057733=c2hvcA%3D%3D; 2a0d2363701f23f8a75028924a3af643=MTEyLjE2OS4zMy42Nw%3D%3D',
        'Host': 'www.gupishop.com',
        'Pragma': 'no-cache',
        'Referer': 'http://www.gupishop.com/bbs/board.php?bo_table=shop&page=1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36',
    }
    pageString = requests.get(url, headers= headers).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    tr = bsObj.find_all('tr')
    print(url, intPageNo)
    result = []
    for info in tr:
        try:
            name = '구피샵'
            branch = info.select('a')[0]
            branch = str(branch).split('>')
            branch = str(branch[1]).replace(' ','').replace('</a','')
            addr = info.select('a')[2]
            addr = str(addr).split('>')
            addr = str(addr[1]).replace('</a','')
            tell = info.select('a')[1]
            tell = str(tell).split('>')
            tell = str(tell[1]).replace('</a','')
            time = info.select('a')[3]
            time = str(time).split('>')
            time = str(time[1]).replace('</a','')

        except: pass
        else:
            if time == '<b': pass
            else:
                result.append({"name":name,"branch":branch,"addr":addr,"tell":tell,"time":time})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import time
import codecs
import requests
import random
import json
import bs4
from selenium import webdriver

def main():

    outfile = codecs.open('25_으뜸플러스안경.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|TIME\n")

    url_list = getStore_list_all()
    for url in url_list:
        store_list = getStoreInfo(url)
        for store in store_list:
                outfile.write(u'%s|' % store['name'])
                outfile.write(u'%s|' % store['branch'])
                outfile.write(u'%s|' % store['addr'])
                outfile.write(u'%s|' % store['tell'])
                outfile.write(u'%s\n' % store['time'])
    outfile.close()

def getStore_list(intPageNo):
    url = "http://www.top-plus.co.kr/bbs/board.php"
    data = {
        'tbl': 'store',
        'category': '',
        'findType': 'title',
        'findWord': '',
        'sort1': '',
        'sort2': '',
        'it_id': '',
        'shop_flag': '',
        'mobile_flag': '',
        'sh': '',
        # 'page': '12',
    }
    data['page'] = intPageNo
    pageString = requests.post(url, data = data).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(url, intPageNo)
    ul = bsObj.find('ul',{"class":"loca_list"})
    a= ul.find_all('a')
    result = []
    for info in a:
        href = info['href']
        result.append(href)
    results = list(set(result))
    return results

def getStore_list_all():
    result = []
    page = 1
    while True:
        result = result + getStore_list(page)
        if getStore_list(page) ==[] : break
        page +=1
    return result

def getStoreInfo(list_url):
    url = 'http://www.top-plus.co.kr'+list_url
    pageString = requests.get(url)
    bsObj = bs4.BeautifulSoup(pageString.content,"html.parser")
    print(url)
    result =[]
    div = bsObj.find('div',{"class":"lvtxt"})
    names = div.find('h3').text
    names= names.split(' ')
    name = '으뜸플러스안경'
    branch = names[1]
    addr = bsObj.select('div > div > div > div.view_top.clfix > div.lvtxt > ul > li:nth-child(2) > p')
    addr = str(addr).replace('[<p>','').replace('</p>]','')
    tell = bsObj.select('div > div > div > div.view_top.clfix > div.lvtxt > ul > li:nth-child(3) > p')
    tell = str(tell).replace('[<p>','').replace('</p>]','')
    time = bsObj.select('div > div > div > div.view_top.clfix > div.lvtxt > ul > li:nth-child(1) > p')
    time = str(time).replace('[<p>','').replace('</p>]','')
    result.append({"name":name,"branch":branch,"addr":addr,"tell":tell,"time":time})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import codecs
import requests
import bs4

def main():

    outfile = codecs.open('26_에이치스타일.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|TIME\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        if store_list ==[] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])

        page +=1

    outfile.close()

def getStoreInfo(intPageNo):
    url = "http://www.hstylehairsalon.com/shop/search.asp"
    data = {
        # 'page': '1',
        'localCode': '',
        'shopName': ''
    }
    data['page'] = intPageNo
    pageString = requests.post(url, data = data).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(url, intPageNo)
    tbody = bsObj.find('tbody')
    tr = tbody.find_all('tr')
    result = []
    for info in tr:
        try:
            name = '에이치스타일'
            branch1 = info.find('td', {"class": "name"}).text.replace('H스타일','').replace('H스타일','').replace('Hstyle','').replace('.','').replace(' ','').replace('헤어살롱','')
            branch2 = str(branch1).split(')')
            try:
                branch = branch2[1]
            except :
                branch = branch1
            addr = info.find('td', {"class": "add"}).text
            tell =info.find('td', {"class": "tel"}).text
        except : pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import codecs
import requests
import bs4

def main():

    outfile = codecs.open('27_다비치안경.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|TIME\n")

    sido_list = ['경기','강원','제주','경상남도','경상북도','전라남도','전라북도','충청남도','충청북도','서울특별시','인천광역시','대전광역시','광주광역시','울산광역시','부산광역시','대구광역시','세종특별자치시']


    for sido in sido_list:
        page = 1
        while True:
            store_list = getStoreInfo(sido, page)
            if store_list ==[] : break
            for store in store_list:
                outfile.write(u'%s|' % store['name'])
                outfile.write(u'%s|' % store['branch'])
                outfile.write(u'%s|' % store['addr'])
                outfile.write(u'%s\n' % store['tell'])

            page +=1

    outfile.close()


def getStoreInfo(sidoList, intPageNo):
    url = "https://www.davich.com/04_market/01_find.php"
    data = {
        # 'pg': '2',
        # 'sido': '경기',
        'gugun': '',
    }
    data['pg'] = intPageNo
    data['sido'] = sidoList
    pageString = requests.get(url, params = data)
    bsObj = bs4.BeautifulSoup(pageString.content,"html.parser")
    print(url, sidoList, intPageNo)
    result = []
    li = bsObj.find_all('li',{"class":"pay_left_s"})
    for info in li:
        try:
            name = '다비치안경'
            branch = info.find('td',{"width":"*"}).text
            addr = info.select('a')[2]
            addr = str(addr).split("'")
            addr = str(addr[1]).lstrip().rstrip()
            tell = info.find('td',{"width":"150"}).text
        except: pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import codecs
import requests
import bs4

def main():

    outfile = codecs.open('28_K비젼안경.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        if store_list ==[] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])

        page +=1

    outfile.close()

def getStoreInfo(intPageNo):
    url = "https://www.kvisionoptical.com/store"
    data = {
        '/store': '',
        'focus': 'sub_menu',
        # 'pgn_page': '2',
    }
    data['pgn_page'] = intPageNo
    pageString = requests.get(url, params = data)
    bsObj = bs4.BeautifulSoup(pageString.content,"html.parser")
    print(url, intPageNo)
    ul = bsObj.find('ul',{"class":"store_lists clearfix pt25"})
    li = ul.find_all('div',{"class":"wrapper"})
    result = []
    for info in li:
        try:
            name = 'K비젼안경'
            branch = info.find('h4').text.replace('K비젼안경','').replace(' ','')
            addr = info.find('p').text
            tell = info.select('a')[1]['href']
            tell = str(tell).replace('tel:','')
        except: pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import codecs
import requests
import bs4

def main():

    outfile = codecs.open('29_렌즈디바.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        if store_list ==[] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])

        page +=1

    outfile.close()

def getStoreInfo(intPageNo):
    url = "https://lensdiva.com/board/board_list.php"
    data = {
        'board_name': 'branch',
        'view_id': '0',
        # 'page': '2',
    }
    data['page'] = intPageNo
    pageString = requests.get(url, params = data).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(url, intPageNo)
    ul = bsObj.find('tbody')
    li = ul.find_all('tr')
    result = []
    for info in li:
        try:
            name = '렌즈디바'
            branch = info.find('td',{"class":"subject"}).text.replace('\r','').replace('\n','').replace('\t','').replace(' ','')
            addr = info.find('td',{"style":"text-align:left;"}).text
            tell = info.select('td')[5]
            tell = str(tell).replace('<td>','').replace('</td>','')
        except : pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import codecs
import requests
import bs4

def main():

    outfile = codecs.open('31_시호비전.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    store_list = getStoreList_dup()

    for store in store_list:
        outfile.write(u'%s|' % store['name'])
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s|' % store['addr'])
        outfile.write(u'%s\n' % store['tell'])

    outfile.close()

def getStoreInfo(intPageNo):
    url = 'http://www.seeho.co.kr/go/store_info.asp?CB=1&CP={}&MN=go10'.format(intPageNo)
    pageString = requests.post(url)
    bsObj = bs4.BeautifulSoup(pageString.content,"html.parser")
    print(url ,intPageNo)
    tr = bsObj.find_all('tr')
    result = []
    for info in tr:
        try:
            name = '시호비전'
            branch = info.find('td',{"width":"173"}).text.split(' ')
            branch = branch[0]
            addr = info.find('td',{"width":"300"}).text.replace('&nbsp;','').replace(' ','')
            tell = info.find('td',{"width":"99"}).text
        except : pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
    return result

def getStoreList_all():
    result = []
    page = 1
    while True:
        result = result + getStoreInfo(page)
        if getStoreInfo(page) == []: break
        page += 1
    return result

def getStoreList_dup():
    result = getStoreList_all()
    results = set()
    new_results = []
    for list in result:
        lists = tuple(list.items())
        if lists not in results:
            results.add(lists)
            new_results.append(list)
    return new_results

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import codecs
import requests
import bs4

def main():

    outfile = codecs.open('32_약손명가.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        if store_list ==[] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])
        page +=1

    outfile.close()

def getStoreInfo(intPageNo):
    url = 'http://www.beautymade.com/kor/contents.php?code=010501&sca=&sido=&search_target=&search_keyword=&page={}'.format(intPageNo)
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(url ,intPageNo)
    tr = bsObj.find_all('tr')
    result = []
    for info in tr:
        try:
            name = '약손명가'
            branch = info.select('span')[0]
            branch = str(branch).split('>')
            branch = branch[1].replace('\n','').replace('\t','').replace('</span','').lstrip().rstrip()
            addr = info.select('span')[1]
            addr = str(addr).split('>')
            addr = addr[1].replace('\n','').replace('\t','').replace('</span','').lstrip().rstrip()
            tell = info.select('td')[3]
            tell = str(tell).split('>')
            tell = tell[1].replace('\n','').replace('\t','').replace('</td','').lstrip().rstrip()
        except : pass
        else:
            result.append({"name": name, "branch": branch,"addr":addr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import codecs
import requests
import bs4

def main():

    outfile = codecs.open('33_미각.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        if store_list ==[] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])
        page +=1

    outfile.close()

def getStoreInfo(intPageNo):
    url = 'http://migak.kr/bbs/board.php?bo_table=branch&page={}'.format(intPageNo)
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(url ,intPageNo)
    tbody = bsObj.find('tbody')
    tr = tbody.findAll('tr')
    result = []
    for info in tr:
        try:
            name = '미각'
            branch = info.select('a')[1]
            branch = str(branch).split('>')
            branch = str(branch[1]).lstrip().rstrip().replace('                </a','').replace(' ','')
            addr = info.find('td',{"class":"td_location"}).text
            tell = info.find('td',{"class":"td_name sv_use"}).text
        except : pass
        else:
            result.append({"name": name, "branch": branch,"addr":addr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import codecs
import requests
import bs4
import json

def main():

    outfile = codecs.open('34_으뜸50안경원.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|XCORD|YCORD\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s|' % store['xcord'])
            outfile.write(u'%s\n' % store['ycord'])
        page +=1
        if page == getstoreNum(): break

    outfile.close()

def getStoreInfo(intPageNo):
    url = 'http://top50glasses.com/ajax/get_map_list.cm'
    data = {
        'board_code': 'b20190531d35ea98f47eb0',
        'search': '',
        'search_mod': 'all',
        'page': '2',
        'sort': 'NAME',
        'status': '',
    }
    data['page'] = intPageNo
    pageString = requests.post(url, data = data).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(url ,intPageNo)
    div_all = bsObj.select('div')
    result = []
    for info in div_all:
        try:
            name = '으뜸50안경'
            branch = info.find('div',{"class":"tit"}).text.replace(' ','')
            addr = info.find('p',{"class":"adress"}).text
            xcord = info.select('input')[0]['value']
            if str(xcord) == 'all' : xcord = ''
            elif str(xcord).startswith('[{"category_cod') == True: xcord = ''
            ycord = info.select('input')[1]['value']
            if str(ycord).startswith('Y') == True : ycord = ''
        except : pass
        else:
            if branch == '142': pass
            elif xcord == '' : pass
            else :
                result.append({"name": name, "branch": branch,"addr":addr,"xcord":xcord,"ycord":ycord})
    results = set()
    new_results = []
    for list in result:
        lists = tuple(list.items())
        if lists not in results:
            results.add(lists)
            new_results.append(list)
    return new_results

def getstoreNum():
    url = 'http://top50glasses.com/map'
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    listNum = bsObj.select('#map_list_fold_b20190531d35ea98f47eb0 > div.map-list > div.map-toolbar > div.toolbar_top.map-inner > div.head_wrap.clearfix > div.tit > span')
    listNum = str(listNum).split('>')[1]
    listNum = listNum.replace('</span','')
    listNum = int(int(listNum) // 10 + 2)
    return listNum


def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import codecs
import requests
import bs4
import json
import time
import random

def main():

    outfile = codecs.open('35_배달의쌀국수.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    url_list = getStoreList_dup()
    for urls in url_list:
        store_list = getStoreInfo(urls)
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])
    time.sleep(random.uniform(0.6, 0.9))
    outfile.close()

def getStoreInfo_list(intPageNo):
    url = 'http://www.baessal.com/%eb%a7%a4%ec%9e%a5%ec%95%88%eb%82%b4/?board_name=sss11&mode=list&search_field=fn_title&order_by=fn_pid&order_type=desc&board_page={}&list_type=list'.format(intPageNo)
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(url ,intPageNo)
    tbody = bsObj.find('tbody',{"id":"sss11_board_body"})
    tr = tbody.find_all('tr')
    result = []
    for info in tr:
        a = info.find('a')['href']
        result.append(a)
    return result

def getStoreList_all():
    result = []
    page = 1
    while True:
        result = result + getStoreInfo_list(page)
        if getStoreInfo_list(page) == []: break
        page += 1
        if page == 7 : break
    return result

def getStoreList_dup():
    results = list(set(getStoreList_all()))
    return results
    # result = getStoreList_all()
    # results = set()
    # new_results = []
    # for list in result:
    #     lists = tuple(list.items())
    #     if lists not in results:
    #         results.add(lists)
    #         new_results.append(list)
    # return new_results

def getStoreInfo(urls):
    url = urls
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(urls)
    result = []
    try:
        name = '배달의쌀국수'
        branch = bsObj.select('#mb_sss11_tr_title > td > span:nth-child(1)')
        branch = str(branch).split('>')
        branch = str(branch[1]).replace('</span','').lstrip().rstrip()
        addr = bsObj.select('#mb_sss11_tr_content > td > p:nth-child(1) > span')
        addr = str(addr).split(':')
        addr = str(addr[2]).replace('</span>]','').lstrip().rstrip()
        tell = bsObj.select('#mb_sss11_tr_content > td > p:nth-child(2) > span')
        tell = str(tell).split(':')
        tell = str(tell[2]).replace('</span>]','').replace('<span style="font-size','').replace('<br/>','').lstrip().rstrip()
        if branch == '광진점' : tell = '02-455-0856'
    except : pass
    else:
        result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import codecs
import requests
import bs4
import json

def main():

    outfile = codecs.open('36_일공공샤브.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|XCORD|YCORD\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s|' % store['xcord'])
            outfile.write(u'%s\n' % store['ycord'])
        page +=1
        if page == getstoreNum(): break
    outfile.close()

def getStoreInfo(intPageNo):
    url = 'https://xn--ob0ba932kgvccvl.kr/ajax/get_map_list.cm'
    data = {
        'board_code': 'b201911123282316637b2f',
        'search': '',
        'search_mod': 'all',
        # 'page': '2',
        'sort': 'TIME',
    }
    data['page'] = intPageNo
    pageString = requests.post(url, data = data).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(url ,intPageNo)
    div_all = bsObj.select('div')
    result = []
    for info in div_all:
        try:
            name = '일공공샤브'
            branch = info.find('div',{"class":"tit"}).text.replace(' ','')
            addr = info.find('p',{"class":"adress"}).text
            xcord = info.select('input')[0]['value']
            if str(xcord) == 'all' : xcord = ''
            elif str(xcord).startswith('[{"category_cod') == True: xcord = ''
            ycord = info.select('input')[1]['value']
            if str(ycord).startswith('Y') == True : ycord = ''
        except : pass
        else:
            if branch == '매장찾기22': pass
            elif xcord == '' : pass
            else :
                result.append({"name": name, "branch": branch,"addr":addr,"xcord":xcord,"ycord":ycord})
    results = set()
    new_results = []
    for list in result:
        lists = tuple(list.items())
        if lists not in results:
            results.add(lists)
            new_results.append(list)
    return new_results

def getstoreNum():
    url = 'https://xn--ob0ba932kgvccvl.kr/26'
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    listNum = bsObj.select('#map_list_fold_b201911123282316637b2f > div.map-list > div.map-toolbar > div.toolbar_top.map-inner > div.head_wrap.clearfix > div.tit > span')
    listNum = str(listNum).split('>')[1]
    listNum = listNum.replace('</span','')
    listNum = int(int(listNum) // 10 + 2)
    return listNum

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import codecs
import requests
import bs4
import json

def main():

    outfile = codecs.open('38_E안경.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|XCORD|YCORD\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s|' % store['xcord'])
            outfile.write(u'%s\n' % store['ycord'])
        page +=1
        if page == getstoreNum(): break
    outfile.close()

def getStoreInfo(intPageNo):
    url = 'http://www.eankyoung.co.kr/ajax/get_map_list.cm'
    data = {
        'board_code': 'b201908312bf7e89c92500',
        'search': '',
        'search_mod': 'all',
        # 'page': '2',
        'sort': 'TIME',
    }
    data['page'] = intPageNo
    pageString = requests.post(url, data = data).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(url ,intPageNo)
    div_all = bsObj.select('div')
    result = []
    for info in div_all:
        try:
            name = 'E안경'
            branch = info.find('div',{"class":"tit"}).text.replace(' ','').replace('(주)','').replace('E안경','')
            addr = info.find('p',{"class":"adress"}).text
            tell = info.find('p',{"class":"tell"}).text.replace('phone number','')
            xcord = info.select('input')[0]['value']
            ycord = info.select('input')[1]['value']
        except : pass
        else:
            if branch == '매장안내17': pass
            else :
                result.append({"name": name, "branch": branch,"addr":addr,"tell":tell,"xcord":xcord,"ycord":ycord})
    results = set()
    new_results = []
    for list in result:
        lists = tuple(list.items())
        if lists not in results:
            results.add(lists)
            new_results.append(list)
    return new_results

def getstoreNum():
    url = 'http://www.eankyoung.co.kr/31'
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    listNum = bsObj.select('#map_list_fold_b201908312bf7e89c92500 > div.map-list > div.map-toolbar > div.toolbar_top.map-inner > div.head_wrap.clearfix > div.tit > span')
    listNum = str(listNum).split('>')[1]
    listNum = listNum.replace('</span','')
    listNum = int(int(listNum) // 10 + 2)
    return listNum

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()

import sys
import codecs
import requests
import bs4
import json

def main():

    outfile = codecs.open('39_홍대쌀국수.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR\n")

    page = 1
    while True:
        store_list = getStoreInfo(page)
        if store_list==[] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s\n' % store['addr'])

        page +=1

    outfile.close()

def getStoreInfo(intPageNo):
    url = 'http://www.hongdaefood.com/board/lists/franchise/page/{}'.format(intPageNo)
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString, "html.parser")
    print(url, intPageNo)
    table = bsObj.find('table')
    tr = table.find_all('tr')
    result = []
    for info in tr:
        try:
            name = '홍대쌀국수'
            branch = info.find('a').text.replace(' ','').lstrip().rstrip()
            addr = info.find('td',{"style":"text-align: left;"}).text
        except:
            pass
        else:
            result.append({"name": name, "branch": branch, "addr": addr})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()
import sys
import codecs
import requests
import bs4
import json

def main():

    outfile = codecs.open('40_크린에이드.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    page = 1
    while True :
        store_list = getStoreInfo(page)
        if getStoreInfo(page) == [] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])
        page += 1

    outfile.close()

def getStoreInfo(intPageNo):
    url = 'http://www.clean-aid.co.kr/useinfo/ajax.store.php'
    data = {
        'md': 'search',
        'bs': '',
        # 'pg': '2',
        'ar1': '',
        'ar2': '',
        'sf': 'all',
        'area1': '',
        'area2': '',
        'ss': '',
    }
    data['pg'] = intPageNo
    pageString = requests.post(url, data = data).text
    bsObj = bs4.BeautifulSoup(pageString, "html.parser")
    print(url,intPageNo)
    tr = bsObj.find_all('tr')
    result = []
    for info in tr:
        try:
            name = '크린에이드'
            branch = info.find('th').text
            addr = info.find('div',{"class":"adrs"}).text.replace('\xa0','')
            tell = info.find('div',{"class":"call"}).text
        except : pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()

import sys
import codecs
import requests
import bs4
import random
import time

def main():

    outfile = codecs.open('41_투쿨포스쿨.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    page = 1
    while True :
        store_list = getStoreInfo(page)
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])
        page += 1
        if page == 4 : break
        time.sleep(random.uniform(0.3, 0.9))
    outfile.close()

def getStoreInfo(intPageNo):
    url = 'https://www.toocoolforschool.com/board/board.html?code=toocool4_board5&page={}&board_cate=6'.format(intPageNo)
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString, "html.parser")
    print(url, intPageNo)
    tbody = bsObj.find('tbody')
    tr = tbody.find_all('tr')
    result = []
    for info in tr:
        try:
            name = '투쿨포스쿨'
            branch = info.find('div',{"class":"td_wrap store_name"}).text.replace(' ','')
            branch = branch.split(']')
            branch = branch[1].replace('\n','')
            addr = info.find('div',{"class":"sbj"}).text.replace('\n','').lstrip().rstrip()
            tell = info.select('div')[2]
            tell = str(tell).replace('<div class="td_wrap">','').replace('</div>','').lstrip().rstrip()
        except : pass
        else:
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
    results = set()
    new_results = []
    for list in result:
        lists = tuple(list.items())
        if lists not in results:
            results.add(lists)
            new_results.append(list)
    return new_results

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()

import sys
import codecs
import requests
import bs4
import random
import time

def main():

    outfile = codecs.open('42_차홍룸.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    url_list = getStoreInfo_list()
    for url in url_list:
        store_list = getStoreInfo(url)
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])

        time.sleep(random.uniform(0.3, 0.9))
    outfile.close()

def getStoreInfo_list():
    url = 'http://chahongsalon.com/salon/chahong-room/'
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString, "html.parser")
    print(url)
    div = bsObj.find('div',{"class":"row large-columns-4 medium-columns-3 small-columns-2"})
    div_all = div.find_all('div',{"class":"page-col col"})
    result = []
    for info in div_all:
        a = info.find('a')['href']
        result.append(a)
    return result

def getStoreInfo(urls):
    url = urls
    pageString = requests.get(url).text
    bsObj = bs4.BeautifulSoup(pageString, "html.parser")
    print(url)
    result = []
    name = '차홍룸'
    branch = bsObj.select('div > div > h4 > strong')
    branch = str(branch).replace('[<strong>','').replace('</strong>]','').replace('차홍룸','').replace(' ','')
    infos = bsObj.select('div > div > p > strong')

    try:
        infos = str(infos).split('<br/>')
        addr = infos[0].replace('[<strong>','').lstrip().rstrip()
        tell = infos[1].replace('</strong>','').replace("']","").replace('</strong>]','').replace('예약문의','').replace(':','').replace('','').lstrip().rstrip()
    except:
        try:
            addr = infos[0]
            addr = addr.replace('<strong>','').replace('</strong>','').lstrip().rstrip()
            tell = infos[1]
            tell = tell.replace('예약문의','').replace("']","").replace('</strong>]','').replace(':','').replace('','').replace('<strong>','').replace('</strong>','').replace('<span class="tell">','').replace('</span>','').lstrip().rstrip()
        except:
            try:
                infos = str(infos).split('예약문의 :')
                addr = infos[0].replace("['[<strong>","").replace('</strong>','').replace('<strong>','').lstrip().rstrip()
                tell = infos[1].replace('<span class="tell">','').replace("']","").replace('</strong>]','').replace('</span>','').replace('<strong>','').lstrip().rstrip()
            except :
                infos = bsObj.select('div > div > p')
                infos = str(infos).split('<br/>')
                addr = infos[0].replace('[<p>', '').replace('<strong>','').replace('</strong>','').lstrip().rstrip()
                tell = infos[1].replace('</p>', '').replace('<p>', '').replace("']","").replace('예약문의 : ', '').replace('<strong>','').replace('</strong>','').lstrip().rstrip()
                tell = str(tell.split(',')[0]).replace(']','')
    result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()

import sys
import codecs
import requests
import bs4
import random
import time

def main():

    outfile = codecs.open('43_보다안경원.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    page = 1
    while True :
        store_list = getStoreInfo(page)
        if store_list == [] : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])
        page += 1

        time.sleep(random.uniform(0.3, 0.9))
    outfile.close()

def getStoreInfo(intPageNo):
    url = 'http://www.vodaeyewear.co.kr/store/store_search?keyword=0&area=0&area2=0&shop_no=0&shop_sort=1&per_page={}'.format(intPageNo)
    pageString = requests.get(url)
    bsObj = bs4.BeautifulSoup(pageString.content, "html.parser")
    print(url, intPageNo)
    div = bsObj.find('div',{"class":"map_list"})
    li = div.find_all('li')
    result = []
    for info in li:
        name = '보다안경원'
        branch = info.find('h4').text.replace('보다안경원','').replace('(','').replace(')','')
        infos = info.find('div',{"class":"map_info"})
        infos = str(infos).split('<br/>')
        addr = infos[0].replace('<div class="map_info">','').rstrip().lstrip()
        tell = infos[1].replace('</div>','')
        result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()

import sys
import codecs
import requests
import bs4
import random
import time

def main():

    outfile = codecs.open('44_쌍용자동차부품대리점.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    page = 2
    while True :
        store_list = getStoreInfo(page)
        if store_list == None : break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])
        page += 1

        time.sleep(random.uniform(0.3, 0.9))

    store_list = getStoreInfo_ori()
    for store in store_list:
        outfile.write(u'%s|' % store['name'])
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s|' % store['addr'])
        outfile.write(u'%s\n' % store['tell'])
    outfile.close()

def getStoreInfo(intPageNo):
    url = 'https://www.smotor.com/kr/service/network/comp/index,1,list,{}.html'.format(intPageNo)
    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Cookie': 'WMONID=QJ7MzJROPs4; JSESSIONID=PaTR16hCSUEhswK0MkROr8bTJfLSi3UU9R9NzkZPOdeRAX1D42OwKDyDkDGjPFLy.was02_servlet_engine3',
        'Host': 'www.smotor.com',
        'Pragma': 'no-cache',
        'Referer': 'https://www.smotor.com/kr/service/network/comp/index.html',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36',
    }
    pageString = requests.get(url, headers = headers)
    bsObj = bs4.BeautifulSoup(pageString.content, "html.parser")
    print(url, intPageNo)
    tbody = bsObj.find('tbody')
    result = []
    try:
        tr = tbody.find_all('tr')
    except: pass
    else:
        for info in tr:
            name = '쌍용자동차부품대리점'
            branch = info.select('td')[1]
            branch = str(branch).replace('<td class="leftTxt">','').replace('</td>','').lstrip().rstrip()
            addr = info.select('td')[2]
            addr = str(addr).replace('<td class="leftTxt">','').replace('</td>','').replace('\xa0','').lstrip().rstrip()
            tell = info.select('td')[3]
            tell = str(tell).replace('<td>','').replace('</td>','').lstrip().rstrip()
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
        return result

def getStoreInfo_ori():
    url2 = 'https://www.smotor.com/kr/service/network/comp/index.html'
    headers2 = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Cookie': 'WMONID=QJ7MzJROPs4; JSESSIONID=PaTR16hCSUEhswK0MkROr8bTJfLSi3UU9R9NzkZPOdeRAX1D42OwKDyDkDGjPFLy.was02_servlet_engine3',
        'Host': 'www.smotor.com',
        'Pragma': 'no-cache',
        'Referer': 'https://www.smotor.com/kr/service/network/comp/index.html',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36',
    }
    pageString2 = requests.get(url2, headers=headers2)
    bsObj2 = bs4.BeautifulSoup(pageString2.content, "html.parser")
    tbody2 = bsObj2.find('tbody')
    tr2 = tbody2.find_all('tr')
    result = []
    for info in tr2:
        name = '쌍용자동차부품대리점'
        branch = info.select('td')[1]
        branch = str(branch).replace('<td class="leftTxt">', '').replace('</td>', '').lstrip().rstrip()
        addr = info.select('td')[2]
        addr = str(addr).replace('<td class="leftTxt">', '').replace('</td>', '').replace('\xa0', '').lstrip().rstrip()
        tell = info.select('td')[3]
        tell = str(tell).replace('<td>', '').replace('</td>', '').lstrip().rstrip()
        result.append({"name": name, "branch": branch, "addr": addr, "tell": tell})

    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()

import sys
import codecs
import requests
import bs4
import random
import time

def main():

    outfile = codecs.open('45_타다대우상용차정비공장.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    page = 1
    while True :
        store_list = getStoreInfo_svc(page)
        if store_list == []: break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])
        page += 1
        time.sleep(random.uniform(0.3, 0.9))

    outfile.close()

    outfile = codecs.open('45_타다대우상용차대리점.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")

    page = 1
    while True :
        store_list = getStoreInfo_dealer(page)
        if store_list == []: break
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s\n' % store['tell'])
        page += 1
        time.sleep(random.uniform(0.3, 0.9))

    outfile.close()


def getStoreInfo_dealer(intPageNo):
    url = 'http://www.tata-daewoo.com/ver7/purchase/sales_guide.php?page={}&code=01&sido=&gugun=&searchkw='.format(intPageNo)
    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Cookie': '_ga=GA1.2.206477546.1591341638; _gid=GA1.2.1743987058.1591341638',
        'Host': 'www.tata-daewoo.com',
        'Pragma': 'no-cache',
        'Referer': 'http://www.tata-daewoo.com/ver7/purchase/sales_guide.php?page=2&code=02&sido=&gugun=&searchkw=',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36',
    }
    pageString = requests.get(url, headers = headers)
    bsObj = bs4.BeautifulSoup(pageString.content, "html.parser")
    print(url, intPageNo)
    tbody = bsObj.find('tbody')
    result = []
    try:
        tr = tbody.find_all('tr')
    except: pass
    else:
        for info in tr:
            name = '타타대우판매대리점'
            branch = info.find('a').text.replace('(주)','').replace('(유)','').replace('(합)','').replace(' ','')
            addr = info.find('td',{"class":"address"}).text
            tell = info.select('td')[2]
            tell = str(tell).replace('<td>','').replace('</td>','').lstrip().rstrip()
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
        return result

def getStoreInfo_svc(intPageNo):
    url = 'http://www.tata-daewoo.com/ver7/purchase/sales_guide.php?page={}&code=02&sido=&gugun=&searchkw='.format(intPageNo)
    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Cookie': '_ga=GA1.2.206477546.1591341638; _gid=GA1.2.1743987058.1591341638',
        'Host': 'www.tata-daewoo.com',
        'Pragma': 'no-cache',
        'Referer': 'http://www.tata-daewoo.com/ver7/purchase/sales_guide.php?page=2&code=02&sido=&gugun=&searchkw=',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36',
    }
    pageString = requests.get(url, headers = headers)
    bsObj = bs4.BeautifulSoup(pageString.content, "html.parser")
    print(url, intPageNo)
    tbody = bsObj.find('tbody')
    result = []
    try:
        tr = tbody.find_all('tr')
    except: pass
    else:
        for info in tr:
            name = '타타대우정비공장'
            branch = info.find('a').text.replace('(주)','').replace('(유)','').replace('(합)','').replace(' ','')
            addr = info.find('td',{"class":"address"}).text
            tell = info.select('td')[2]
            tell = str(tell).replace('<td>','').replace('</td>','').lstrip().rstrip()
            result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
        return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()

import sys
import codecs
import requests
import bs4
import random
import time
import json

def main():

    outfile = codecs.open('46_볼보서비스센터.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|TIME1|TIME2|XCORD|YCORD\n")

    store_list = getStoreInfo_svc()
    for store in store_list:
        outfile.write(u'%s|' % store['name'])
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s|' % store['addr'])
        outfile.write(u'%s|' % store['tell'])
        outfile.write(u'%s|' % store['time1'])
        outfile.write(u'%s|' % store['time2'])
        outfile.write(u'%s|' % store['xcord'])
        outfile.write(u'%s\n' % store['ycord'])

    time.sleep(random.uniform(0.3, 0.9))

    outfile.close()

    outfile = codecs.open('46_볼보.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|TIME1|TIME2|XCORD|YCORD\n")

    store_list = getStoreInfo_showroom()
    for store in store_list:
        outfile.write(u'%s|' % store['name'])
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s|' % store['addr'])
        outfile.write(u'%s|' % store['tell'])
        outfile.write(u'%s|' % store['time1'])
        outfile.write(u'%s|' % store['time2'])
        outfile.write(u'%s|' % store['xcord'])
        outfile.write(u'%s\n' % store['ycord'])

    time.sleep(random.uniform(0.3, 0.9))

    outfile.close()

def getStoreInfo_svc():
    url = 'https://vckiframe.com/oxp/center/json/service.json'
    headers = {
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Cookie': '_ga=GA1.2.155548789.1591342790; _gid=GA1.2.1846973381.1591342790; _gat_gtag_UA_163181869_1=1',
        'Host': 'vckiframe.com',
        'Pragma': 'no-cache',
        'Referer': 'https://vckiframe.com/oxp/center/index.html?type=service',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36',
        'X-Requested-With': 'XMLHttpRequest',
    }
    pageString = requests.get(url, headers = headers, verify = False).text
    jsonData = json.loads(pageString)
    result = []
    for info in jsonData:
        name = '볼보서비스센터'
        branch = info['name']
        branch = branch.replace('볼보','').replace(' ','')
        addr = info['addr'].replace('<span>','').replace('</span>','')
        tell = info['phone']
        time1 = info['time_1']
        time2 = info['time_2']
        xcord = info['lng']
        ycord = info['lat']
        result.append({"name":name, "branch":branch,"addr":addr,"tell":tell,"time1":time1,"time2":time2,"xcord":xcord,"ycord":ycord})
    return result

def getStoreInfo_showroom():
    url = 'https://vckiframe.com/oxp/center/json/showroom.json'
    headers = {
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Cookie': '_ga=GA1.2.155548789.1591342790; _gid=GA1.2.1846973381.1591342790; _gat_gtag_UA_163181869_1=1',
        'Host': 'vckiframe.com',
        'Pragma': 'no-cache',
        'Referer': 'https://vckiframe.com/oxp/center/index.html?type=service',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36',
        'X-Requested-With': 'XMLHttpRequest',
    }
    pageString = requests.get(url, headers = headers, verify = False).text
    jsonData = json.loads(pageString)
    result = []
    for info in jsonData:
        name = '볼보'
        branch = info['name']
        branch = branch.replace('볼보','').replace(' ','')
        addr = info['addr'].replace('<span>','').replace('</span>','')
        tell = info['phone']
        time1 = info['time_1']
        time2 = info['time_2']
        xcord = info['lng']
        ycord = info['lat']
        result.append({"name":name, "branch":branch,"addr":addr,"tell":tell,"time1":time1,"time2":time2,"xcord":xcord,"ycord":ycord})
    return result


def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()

import sys
import codecs
import requests
import bs4
import random
import time

def main():

    outfile = codecs.open('47_볼보트럭.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL\n")


    store_list = getStoreInfo()
    for store in store_list:
        outfile.write(u'%s|' % store['name'])
        outfile.write(u'%s|' % store['branch'])
        outfile.write(u'%s|' % store['addr'])
        outfile.write(u'%s\n' % store['tell'])

    time.sleep(random.uniform(0.3, 0.9))

    outfile.close()

def getStoreInfo():
    url = 'https://www.volvotrucks.kr/ko-kr/services/buy_truck.html'
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'cache-control': 'no-cache',
        'cookie': 'ACEUCI2=1; ACEUCI2=1; _ga=GA1.2.1103130955.1591346770; ACEUACS=1579483474047131591; 18418=7; _gid=GA1.2.169889402.1592201857; AMCVS_733E579F5579DEDA7F000101%40AdobeOrg=1; AMCV_733E579F5579DEDA7F000101%40AdobeOrg=-408604571%7CMCIDTS%7C18429%7CMCMID%7C73305855525026610900234388235413220366%7CMCAAMLH-1592806657%7C11%7CMCAAMB-1592806657%7CRKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y%7CMCOPTOUT-1592209057s%7CNONE%7CMCAID%7CNONE%7CvVersion%7C4.6.0; ACEUCI2=1; s_cc=true; _hjid=a3c82678-a45a-4085-a667-09c4f7a3eae4; _hjIncludedInSample=1; __unam=6dd5e7f-17283a8f26d-333e51fc-12; s_sq=%5B%5BB%5D%5D; AWSALB=GtA65jmrZ5/BDvrmbxke0UXgrFbH/wfsfn2ROzLefnuK0H8udqSh7weSEkXHAblI1uS/xSEqOj1p45yH77IM3WHakNrdabTLP7rjMv/N6UuYMZ7eCAfgmKfsVn9B; AWSALBCORS=GtA65jmrZ5/BDvrmbxke0UXgrFbH/wfsfn2ROzLefnuK0H8udqSh7weSEkXHAblI1uS/xSEqOj1p45yH77IM3WHakNrdabTLP7rjMv/N6UuYMZ7eCAfgmKfsVn9B; 18428=10; _ACU109154=1591346772307131597.1592202020565.2.0.131597PIAQRSY5J0IFZ.0.0.0.....; _ACR0=b8d587918aa66d368da5d55e6d3cd5b0cc7eff41; _ACS109154=87; s_ptc=%5B%5BB%5D%5D; s_ht=1592202020431; s_hc=1%7C2%7C2%7C0%7C2; s_tp=3030; s_ppv=mkt-vtc-kr-ko%2Fservices%2Fbuy_truck%2C60%2C60%2C1812; s_tps=79726; s_pvs=2237; gpv_v9=mkt-vtc-kr-ko%2Fservices%2Fbuy_truck',
        'pragma': 'no-cache',
        'referer': 'https://www.volvotrucks.kr/',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-user': '?1',
        'upgrade-insecure-requests': '1',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36',
    }
    pageString = requests.get(url, headers = headers).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    div = bsObj.find_all('ul',{"style":"list-style: none;margin: 0.0px;padding: 0.0px;width: 100.0%;overflow: hidden;font-size: 14.0px;border-bottom-color: rgb(221,221,221);border-bottom-width: 1.0px;border-bottom-style: solid;"})
    result = []
    for info in div:
        name = '볼보트럭'
        branch = info.find('a').text.lstrip().rstrip()
        addr = info.select('li')[4]
        addr = str(addr).split('>')[1]
        addr = addr.replace('</li','')
        tell = info.select('li')[2]
        tell = str(tell).replace('<li style="background: url(/content/dam/volvo/volvo-trucks/markets/korea/training/ta_bg.jpg) no-repeat 100.0% 0.0px;list-style: none;margin: 0.0px;padding: 10.0px 0.0px;width: 15.0%;text-align: center;float: left;">',"").replace('</li>','').replace(')','-')
        result.append({"name":name,"branch":branch,"addr":addr,"tell":tell})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()

import sys
import codecs
import requests
import bs4
import random
import time

def main():

    outfile = codecs.open('48_만도플라자.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|TIME\n")

    urls = getStoreInfo_list()

    for url in urls:
        store_list = getStoreInfo(url)
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s\n' % store['time'])

    time.sleep(random.uniform(0.3, 0.9))

    outfile.close()

def getStoreInfo_list():
    url = 'https://www.mandoplaza.com/service/shop_location?is_official=Y'
    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Cookie': 'mobileapp=N; mandoplazacom_firstmall=448c0d0f680bb15e36c2b87f95758d0a6af955e3; shopReferer=https%3A%2F%2Fwww.google.co.kr%2F; refererDomain=google.co.kr; marketplace=google; mandoplazacomvisitorInfo=a%3A2%3A%7Bs%3A4%3A%22date%22%3Bs%3A10%3A%222020-06-16%22%3Bs%3A7%3A%22referer%22%3Bs%3A25%3A%22https%3A%2F%2Fwww.google.co.kr%2F%22%3B%7D; mobileapp=N',
        'Host': 'www.mandoplaza.com',
        'Pragma': 'no-cache',
        'Referer': 'https://www.mandoplaza.com/service/shop_location?is_as=Y',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36',
    }
    pageString = requests.get(url, headers = headers).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    div = bsObj.find_all('ul',{"class":"tbody"})
    result = []
    for info in div:
        link = info.find('a')['href']
        result.append(link)
    return result


def getStoreInfo(urls):
    url = 'https://www.mandoplaza.com/service/'+urls
    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Cookie': 'mobileapp=N; shopReferer=https%3A%2F%2Fwww.google.co.kr%2F; refererDomain=google.co.kr; marketplace=google; mobileapp=N; mandoplazacom_firstmall=1035463601ae33060e7ba7d1f2037d40e8ba9cda; mandoplazacomvisitorInfo=a%3A2%3A%7Bs%3A4%3A%22date%22%3Bs%3A10%3A%222020-06-17%22%3Bs%3A7%3A%22referer%22%3Bs%3A62%3A%22https%3A%2F%2Fwww.mandoplaza.com%2Fservice%2Fshop_location%3Fis_official%3DY%22%3B%7D',
        'Host': 'www.mandoplaza.com',
        'Pragma': 'no-cache',
        'Referer': 'https://www.mandoplaza.com/service/shop_location?is_official=Y',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36',
    }
    pageString = requests.get(url, headers = headers).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(url)
    result = []
    name = '만도플라자'
    branch = bsObj.select('#layout_body > div > form > div.shp_info_bx > div.shp_info_tit')
    branch = str(branch).replace('[<div class="shp_info_tit">','').replace('</div>]','').replace('\r','').replace('\n','').replace('\t','').replace(' ','')
    addr = bsObj.select('#layout_body > div > form > div.shp_info_bx > div.shp_info_in > div.shp_info_in_right > ul > li:nth-child(5) > div.con')
    addr = str(addr).replace('[<div class="con">','').replace('</div>]','').lstrip().rstrip()
    tell = bsObj.select('#layout_body > div > form > div.shp_info_bx > div.shp_info_in > div.shp_info_in_right > ul > li:nth-child(3) > div.con')
    tell = str(tell).replace('[<div class="con">','').replace('</div>]','').lstrip().rstrip()
    time = bsObj.select('#layout_body > div > form > div.shp_info_bx > div.shp_info_in > div.shp_info_in_right > ul > li:nth-child(4) > div.con')
    time = str(time).replace('[<div class="con">','').replace('</div>]','').lstrip().rstrip()
    result.append({"name":name,"branch":branch,"addr":addr,"tell":tell,"time":time})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()

import sys
import codecs
import requests
import bs4
import random
import time
import json

def main():

    outfile = codecs.open('49_삼성애니카.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|TIME|CORDX|CORDY\n")

    code_list = getStoreInfo_code()
    for code in code_list:
        store_list = getStoreInfo(code)
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s|' % store['time'])
            outfile.write(u'%s|' % store['cordx'])
            outfile.write(u'%s\n' % store['cordy'])

    time.sleep(random.uniform(0.3, 0.9))

    outfile.close()

def getStoreInfo_code():
    url = 'https://myanycar.com/CR_MyAnycarWeb/data/VD.HDSM0096.do'
    data ={
        'sidoGubun' : '',
        'gusiGubun' : '',
        'corpGubun' : '7',
        'serviceType' : '',
    }
    headers = {
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Content-Length': '691',
        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
        'Cookie': 'DSESSIONID=L0z9-cymOYxRmTj9ysQNLx9qJAzjeqleCipbI2zctQUGv6SyXKgl!-1367315392!-968409439; _ga=GA1.2.706907754.1593398907; _gid=GA1.2.1374111756.1593398907; type=0_0_000; param=00000000000; _gat=1',
        'Host': 'myanycar.com',
        'Origin': 'https://myanycar.com',
        'Pragma': 'no-cache',
        'Referer': 'https://myanycar.com/CR_MyAnycarWeb/page/VD.MPDG0222.do?tab=3',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
        'X-Requested-With': 'XMLHttpRequest',
        'X-SFMI-INTLOG': 'N72010-000910^^Y^^^^^^^^^^^^^^^^^',
    }
    pageString = requests.post(url, data = data, headers = headers).text
    jsonstring = json.loads(pageString)
    entityList = jsonstring['responseMessage']['body']['DATA']
    result = []
    for info in entityList:
        code = info['DEPT_CD']
        result.append(code)
    return result

def getStoreInfo(code):
    url = 'https://myanycar.com/CR_MyAnycarWeb/data/VD.HDSM0097.do'
    data={}
    data['KEY_CD'] = code
    headers = {
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Content-Length': '691',
        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
        'Cookie': 'DSESSIONID=L0z9-cymOYxRmTj9ysQNLx9qJAzjeqleCipbI2zctQUGv6SyXKgl!-1367315392!-968409439; _ga=GA1.2.706907754.1593398907; _gid=GA1.2.1374111756.1593398907; type=0_0_000; param=00000000000; _gat=1',
        'Host': 'myanycar.com',
        'Origin': 'https://myanycar.com',
        'Pragma': 'no-cache',
        'Referer': 'https://myanycar.com/CR_MyAnycarWeb/page/VD.MPDG0222.do?tab=3',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
        'X-Requested-With': 'XMLHttpRequest',
        'X-SFMI-INTLOG': 'N72010-000910^^Y^^^^^^^^^^^^^^^^^',
    }
    print(code)
    pageString = requests.post(url, data = data, headers = headers).text
    jsonstring = json.loads(pageString)
    entityList = jsonstring['responseMessage']['body']
    result = []
    name = '애니카랜드'
    branch = entityList['corp_name']
    branch = branch.replace('애니카랜드 ','').replace('(주)','')
    addr = entityList['corp_addr1'] + ' ' + entityList['corp_addr2']
    tell = entityList['corp_tel']
    time = entityList['BAS_BSNS_TIME']
    cordx = entityList['corp_longitude']
    cordy = entityList['corp_latitude']
    result.append({"name":name, "branch":branch,"addr":addr,"tell":tell,"time":time,"cordx":cordx,"cordy":cordy})
    return result


def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()

import sys
import codecs
import requests
import bs4
import random
import time

def main():

    outfile = codecs.open('50_KB매직카.txt', 'w', 'utf-8')
    outfile.write("NAME|BRANCH|ADDR|TELL|TIME\n")

    urls = getStoreInfo_list()

    for url in urls:
        store_list = getStoreInfo(url)
        for store in store_list:
            outfile.write(u'%s|' % store['name'])
            outfile.write(u'%s|' % store['branch'])
            outfile.write(u'%s|' % store['addr'])
            outfile.write(u'%s|' % store['tell'])
            outfile.write(u'%s\n' % store['time'])

    time.sleep(random.uniform(0.3, 0.9))

    outfile.close()

def getStoreInfo_list():
    url = 'https://www.mandoplaza.com/service/shop_location?is_official=Y'
    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Cookie': 'mobileapp=N; mandoplazacom_firstmall=448c0d0f680bb15e36c2b87f95758d0a6af955e3; shopReferer=https%3A%2F%2Fwww.google.co.kr%2F; refererDomain=google.co.kr; marketplace=google; mandoplazacomvisitorInfo=a%3A2%3A%7Bs%3A4%3A%22date%22%3Bs%3A10%3A%222020-06-16%22%3Bs%3A7%3A%22referer%22%3Bs%3A25%3A%22https%3A%2F%2Fwww.google.co.kr%2F%22%3B%7D; mobileapp=N',
        'Host': 'www.mandoplaza.com',
        'Pragma': 'no-cache',
        'Referer': 'https://www.mandoplaza.com/service/shop_location?is_as=Y',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36',
    }
    pageString = requests.get(url, headers = headers).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    div = bsObj.find_all('ul',{"class":"tbody"})
    result = []
    for info in div:
        link = info.find('a')['href']
        result.append(link)
    return result


def getStoreInfo(urls):
    url = 'https://www.mandoplaza.com/service/'+urls
    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'ko,en;q=0.9,ko-KR;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Cookie': 'mobileapp=N; shopReferer=https%3A%2F%2Fwww.google.co.kr%2F; refererDomain=google.co.kr; marketplace=google; mobileapp=N; mandoplazacom_firstmall=1035463601ae33060e7ba7d1f2037d40e8ba9cda; mandoplazacomvisitorInfo=a%3A2%3A%7Bs%3A4%3A%22date%22%3Bs%3A10%3A%222020-06-17%22%3Bs%3A7%3A%22referer%22%3Bs%3A62%3A%22https%3A%2F%2Fwww.mandoplaza.com%2Fservice%2Fshop_location%3Fis_official%3DY%22%3B%7D',
        'Host': 'www.mandoplaza.com',
        'Pragma': 'no-cache',
        'Referer': 'https://www.mandoplaza.com/service/shop_location?is_official=Y',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36',
    }
    pageString = requests.get(url, headers = headers).text
    bsObj = bs4.BeautifulSoup(pageString,"html.parser")
    print(url)
    result = []
    name = '만도플라자'
    branch = bsObj.select('#layout_body > div > form > div.shp_info_bx > div.shp_info_tit')
    branch = str(branch).replace('[<div class="shp_info_tit">','').replace('</div>]','').replace('\r','').replace('\n','').replace('\t','').replace(' ','')
    addr = bsObj.select('#layout_body > div > form > div.shp_info_bx > div.shp_info_in > div.shp_info_in_right > ul > li:nth-child(5) > div.con')
    addr = str(addr).replace('[<div class="con">','').replace('</div>]','').lstrip().rstrip()
    tell = bsObj.select('#layout_body > div > form > div.shp_info_bx > div.shp_info_in > div.shp_info_in_right > ul > li:nth-child(3) > div.con')
    tell = str(tell).replace('[<div class="con">','').replace('</div>]','').lstrip().rstrip()
    time = bsObj.select('#layout_body > div > form > div.shp_info_bx > div.shp_info_in > div.shp_info_in_right > ul > li:nth-child(4) > div.con')
    time = str(time).replace('[<div class="con">','').replace('</div>]','').lstrip().rstrip()
    result.append({"name":name,"branch":branch,"addr":addr,"tell":tell,"time":time})
    return result

def errExit(msg):
    sys.stderr.write(msg + '\n')
    sys.exit(0)

if __name__ == '__main__':
    main()

